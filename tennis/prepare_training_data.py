"""
Tennis Training Data Preparation
Creates ML-ready dataset with features for player1 win prediction
"""
import pandas as pd
import numpy as np
from pathlib import Path
from collections import defaultdict
from datetime import datetime, timedelta


class TennisTrainingDataPreparator:
    """Prepare tennis training data with features"""
    
    def __init__(self, data_dir='tennis/data'):
        self.data_dir = Path(data_dir)
        self.matches = None
        self.rankings = None
        self.players = None
        
    def load_data(self):
        """Load downloaded data"""
        print("=" * 70)
        print("üìÇ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•")
        print("=" * 70)
        print()
        
        # Matches
        matches_path = self.data_dir / 'atp_matches_combined.csv'
        self.matches = pd.read_csv(matches_path)
        print(f"‚úì –ú–∞—Ç—á—ñ: {len(self.matches)}")
        
        # Rankings (optional)
        try:
            rankings_path = self.data_dir / 'atp_rankings.csv'
            self.rankings = pd.read_csv(rankings_path)
            print(f"‚úì –†–µ–π—Ç–∏–Ω–≥–∏: {len(self.rankings)}")
        except:
            print("‚ö†Ô∏è  –†–µ–π—Ç–∏–Ω–≥–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        
        # Players (optional)
        try:
            players_path = self.data_dir / 'atp_players.csv'
            self.players = pd.read_csv(players_path, low_memory=False)
            print(f"‚úì –ì—Ä–∞–≤—Ü—ñ: {len(self.players)}")
        except:
            print("‚ö†Ô∏è  –ë–∞–∑–∞ –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        
        print()
        
    def prepare_matches(self):
        """
        Prepare matches in format: player1 vs player2
        Winner is always player1 (target=1) or player2 (target=0)
        """
        print("=" * 70)
        print("üîß –ü–Ü–î–ì–û–¢–û–í–ö–ê –ú–ê–¢–ß–Ü–í")
        print("=" * 70)
        print()
        
        df = self.matches.copy()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞—Ç—É
        df['tourney_date'] = pd.to_datetime(df['tourney_date'], format='%Y%m%d')
        
        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –¥–∞—Ç—ñ
        df = df.sort_values('tourney_date').reset_index(drop=True)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –º–∞—Ç—á—ñ –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥—É (—è–∫—â–æ –Ω–µ–º–∞—î, –±—É–¥–µ NaN)
        print(f"  –ú–∞—Ç—á—ñ–≤ –¥–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(df)}")
        
        # –ë–∞–∑–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        required_cols = ['winner_id', 'loser_id', 'tourney_date', 'surface']
        df = df.dropna(subset=required_cols)
        
        print(f"  –ú–∞—Ç—á—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(df)}")
        print()
        
        self.matches = df
        return df
    
    def calculate_player_form(self, matches, player_id, date, window=10):
        """
        –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É –≥—Ä–∞–≤—Ü—è (–æ—Å—Ç–∞–Ω–Ω—ñ N –º–∞—Ç—á—ñ–≤ –¥–æ –¥–∞—Ç–∏)
        
        Returns: (wins, losses, form_points)
        """
        # –ú–∞—Ç—á—ñ –≥—Ä–∞–≤—Ü—è –¥–æ –≤–∫–∞–∑–∞–Ω–æ—ó –¥–∞—Ç–∏
        player_matches = matches[
            (matches['tourney_date'] < date) &
            ((matches['winner_id'] == player_id) | (matches['loser_id'] == player_id))
        ].tail(window)
        
        if len(player_matches) == 0:
            return 0, 0, 0
        
        wins = (player_matches['winner_id'] == player_id).sum()
        losses = len(player_matches) - wins
        form_points = wins * 3  # 3 points per win
        
        return wins, losses, form_points
    
    def calculate_h2h(self, matches, player1_id, player2_id, date):
        """
        –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ H2H —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –≤–∫–∞–∑–∞–Ω–æ—ó –¥–∞—Ç–∏
        
        Returns: (player1_h2h_wins, player2_h2h_wins)
        """
        h2h_matches = matches[
            (matches['tourney_date'] < date) &
            (
                ((matches['winner_id'] == player1_id) & (matches['loser_id'] == player2_id)) |
                ((matches['winner_id'] == player2_id) & (matches['loser_id'] == player1_id))
            )
        ]
        
        player1_wins = ((h2h_matches['winner_id'] == player1_id)).sum()
        player2_wins = len(h2h_matches) - player1_wins
        
        return player1_wins, player2_wins
    
    def calculate_surface_stats(self, matches, player_id, date, surface):
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è –Ω–∞ –ø–µ–≤–Ω–æ–º—É –ø–æ–∫—Ä–∏—Ç—Ç—ñ
        
        Returns: (wins, total_matches, win_rate)
        """
        surface_matches = matches[
            (matches['tourney_date'] < date) &
            (matches['surface'] == surface) &
            ((matches['winner_id'] == player_id) | (matches['loser_id'] == player_id))
        ]
        
        if len(surface_matches) == 0:
            return 0, 0, 0.5
        
        wins = (surface_matches['winner_id'] == player_id).sum()
        total = len(surface_matches)
        win_rate = wins / total if total > 0 else 0.5
        
        return wins, total, win_rate
    
    def create_features(self):
        """
        –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–∞—Ç—á—É
        
        –í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ –î–û –º–∞—Ç—á—É (no leakage!)
        """
        print("=" * 70)
        print("üéØ –°–¢–í–û–†–ï–ù–ù–Ø –§–Ü–ß")
        print("=" * 70)
        print()
        
        matches = self.matches.copy()
        features_list = []
        
        total = len(matches)
        
        for idx, match in matches.iterrows():
            if idx % 500 == 0:
                print(f"  –û–±—Ä–æ–±–∫–∞ {idx}/{total} –º–∞—Ç—á—ñ–≤...")
            
            # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            winner_id = match['winner_id']
            loser_id = match['loser_id']
            date = match['tourney_date']
            surface = match['surface']
            
            # –í–ê–ñ–õ–ò–í–û: –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–∏—Ä–∞—î–º–æ —Ö—Ç–æ player1, —Ö—Ç–æ player2
            # –©–æ–± –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–ø–∞–º'—è—Ç–∞–ª–∞ "winner –∑–∞–≤–∂–¥–∏ –≤ –∫–æ–ª–æ–Ω—Ü—ñ 1"
            if np.random.random() > 0.5:
                player1_id = winner_id
                player2_id = loser_id
                target = 1  # player1 –≤–∏–≥—Ä–∞–≤
            else:
                player1_id = loser_id
                player2_id = winner_id
                target = 0  # player2 –≤–∏–≥—Ä–∞–≤
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            player1_rank = match.get('winner_rank' if player1_id == winner_id else 'loser_rank', 999)
            player2_rank = match.get('loser_rank' if player1_id == winner_id else 'winner_rank', 999)
            
            # –§–æ—Ä–º–∞ (–æ—Å—Ç–∞–Ω–Ω—ñ 10 –º–∞—Ç—á—ñ–≤)
            p1_wins, p1_losses, p1_form = self.calculate_player_form(matches, player1_id, date, window=10)
            p2_wins, p2_losses, p2_form = self.calculate_player_form(matches, player2_id, date, window=10)
            
            # H2H
            p1_h2h_wins, p2_h2h_wins = self.calculate_h2h(matches, player1_id, player2_id, date)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—ñ
            p1_surf_wins, p1_surf_total, p1_surf_wr = self.calculate_surface_stats(matches, player1_id, date, surface)
            p2_surf_wins, p2_surf_total, p2_surf_wr = self.calculate_surface_stats(matches, player2_id, date, surface)
            
            # –§—ñ—á—ñ
            features = {
                'match_id': idx,
                'date': date,
                'surface': surface,
                'tourney_name': match.get('tourney_name', ''),
                'tourney_level': match.get('tourney_level', ''),
                
                # –†–µ–π—Ç–∏–Ω–≥–∏
                'player1_rank': player1_rank if pd.notna(player1_rank) else 999,
                'player2_rank': player2_rank if pd.notna(player2_rank) else 999,
                'rank_difference': player1_rank - player2_rank if pd.notna(player1_rank) and pd.notna(player2_rank) else 0,
                
                # –§–æ—Ä–º–∞
                'player1_recent_wins': p1_wins,
                'player1_recent_losses': p1_losses,
                'player1_form_points': p1_form,
                'player2_recent_wins': p2_wins,
                'player2_recent_losses': p2_losses,
                'player2_form_points': p2_form,
                'form_difference': p1_form - p2_form,
                
                # H2H
                'h2h_player1_wins': p1_h2h_wins,
                'h2h_player2_wins': p2_h2h_wins,
                'h2h_total': p1_h2h_wins + p2_h2h_wins,
                
                # –ü–æ–∫—Ä–∏—Ç—Ç—è
                'player1_surface_wins': p1_surf_wins,
                'player1_surface_total': p1_surf_total,
                'player1_surface_winrate': p1_surf_wr,
                'player2_surface_wins': p2_surf_wins,
                'player2_surface_total': p2_surf_total,
                'player2_surface_winrate': p2_surf_wr,
                'surface_winrate_diff': p1_surf_wr - p2_surf_wr,
                
                # One-hot –¥–ª—è –ø–æ–∫—Ä–∏—Ç—Ç—è
                'is_hard': 1 if surface == 'Hard' else 0,
                'is_clay': 1 if surface == 'Clay' else 0,
                'is_grass': 1 if surface == 'Grass' else 0,
                
                # –†—ñ–≤–µ–Ω—å —Ç—É—Ä–Ω—ñ—Ä—É
                'is_grand_slam': 1 if match.get('tourney_level') == 'G' else 0,
                'is_masters': 1 if match.get('tourney_level') == 'M' else 0,
                
                # TARGET
                'player1_win': target
            }
            
            features_list.append(features)
        
        print(f"  ‚úì –û–±—Ä–æ–±–ª–µ–Ω–æ {len(features_list)} –º–∞—Ç—á—ñ–≤")
        print()
        
        df_features = pd.DataFrame(features_list)
        return df_features
    
    def save_training_data(self, df, output_path='tennis/data/tennis_training_data.csv'):
        """Save training data"""
        print("=" * 70)
        print("üíæ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø")
        print("=" * 70)
        print()
        
        output_path = Path(output_path)
        df.to_csv(output_path, index=False)
        
        print(f"‚úì –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
        print(f"  –ó–∞–ø–∏—Å—ñ–≤: {len(df)}")
        print(f"  –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ Player1 wins: {df['player1_win'].sum()} ({df['player1_win'].mean():.1%})")
        print(f"  ‚Ä¢ Player2 wins: {(1-df['player1_win']).sum()} ({(1-df['player1_win']).mean():.1%})")
        print()
        
        if 'surface' in df.columns:
            print("  –ü–æ–∫—Ä–∏—Ç—Ç—è:")
            for surf in df['surface'].value_counts().items():
                print(f"    ‚Ä¢ {surf[0]}: {surf[1]:,} –º–∞—Ç—á—ñ–≤")
        print()
        
        return output_path
    
    def run(self):
        """–ü–æ–≤–Ω–∏–π –ø–∞–π–ø–ª–∞–π–Ω"""
        print()
        print("=" * 70)
        print("üéæ –ü–Ü–î–ì–û–¢–û–í–ö–ê TENNIS TRAINING DATA")
        print("=" * 70)
        print()
        
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
        self.load_data()
        
        # 2. –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –º–∞—Ç—á—ñ
        self.prepare_matches()
        
        # 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ—á—ñ
        df_features = self.create_features()
        
        # 4. –ó–±–µ—Ä–µ–≥—Ç–∏
        output_path = self.save_training_data(df_features)
        
        print("=" * 70)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("=" * 70)
        print()
        print("–ù–ê–°–¢–£–ü–ù–ò–ô –ö–†–û–ö:")
        print("  python tennis/train_model.py")
        print()
        
        return df_features


def main():
    preparator = TennisTrainingDataPreparator()
    preparator.run()


if __name__ == '__main__':
    main()
