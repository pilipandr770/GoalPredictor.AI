"""
Tennis Data Downloader
Downloads ATP match data from Jeff Sackmann's GitHub repository
"""
import pandas as pd
import os
from pathlib import Path


class TennisDataDownloader:
    """Download ATP tennis data from GitHub"""
    
    BASE_URL = "https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/"
    
    def __init__(self, output_dir='tennis/data'):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True, parents=True)
        
    def download_matches(self, years=None):
        """
        Download ATP matches for specified years
        
        Args:
            years: List of years (e.g. [2020, 2021, 2022, 2023, 2024])
        """
        if years is None:
            years = [2020, 2021, 2022, 2023, 2024]
        
        print("=" * 70)
        print("üéæ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ATP –ú–ê–¢–ß–Ü–í")
        print("=" * 70)
        print()
        
        all_matches = []
        
        for year in years:
            print(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {year}...")
            try:
                url = f"{self.BASE_URL}atp_matches_{year}.csv"
                df = pd.read_csv(url)
                
                print(f"  ‚úì {len(df)} –º–∞—Ç—á—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
                all_matches.append(df)
                
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        if all_matches:
            # –û–±'—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ —Ä–æ–∫–∏
            combined = pd.concat(all_matches, ignore_index=True)
            
            output_path = self.output_dir / 'atp_matches_combined.csv'
            combined.to_csv(output_path, index=False)
            
            print()
            print(f"‚úÖ –í—Å—å–æ–≥–æ –º–∞—Ç—á—ñ–≤: {len(combined)}")
            print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
            print()
            
            return combined
        
        return None
    
    def download_rankings(self):
        """Download current ATP rankings"""
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ ATP...")
        
        try:
            url = f"{self.BASE_URL}atp_rankings_current.csv"
            df = pd.read_csv(url)
            
            output_path = self.output_dir / 'atp_rankings.csv'
            df.to_csv(output_path, index=False)
            
            print(f"  ‚úì {len(df)} –≥—Ä–∞–≤—Ü—ñ–≤ —É —Ä–µ–π—Ç–∏–Ω–≥—É")
            print(f"  üíæ {output_path}")
            print()
            
            return df
            
        except Exception as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return None
    
    def download_players(self):
        """Download ATP players database"""
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ –≥—Ä–∞–≤—Ü—ñ–≤...")
        
        try:
            url = f"{self.BASE_URL}atp_players.csv"
            df = pd.read_csv(url)
            
            output_path = self.output_dir / 'atp_players.csv'
            df.to_csv(output_path, index=False)
            
            print(f"  ‚úì {len(df)} –≥—Ä–∞–≤—Ü—ñ–≤ –≤ –±–∞–∑—ñ")
            print(f"  üíæ {output_path}")
            print()
            
            return df
            
        except Exception as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return None
    
    def download_all(self):
        """Download everything"""
        print()
        print("=" * 70)
        print("üéæ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í–°–Ü–• ATP –î–ê–ù–ò–•")
        print("=" * 70)
        print()
        
        # Matches 2020-2024
        matches = self.download_matches([2020, 2021, 2022, 2023, 2024])
        
        # Rankings
        rankings = self.download_rankings()
        
        # Players
        players = self.download_players()
        
        print("=" * 70)
        print("‚úÖ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 70)
        print()
        
        if matches is not None:
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –ú–∞—Ç—á—ñ–≤: {len(matches):,}")
            print(f"  ‚Ä¢ –¢—É—Ä–Ω—ñ—Ä—ñ–≤: {matches['tourney_name'].nunique()}")
            print(f"  ‚Ä¢ –ü–µ—Ä—ñ–æ–¥: {matches['tourney_date'].min()} - {matches['tourney_date'].max()}")
            print()
            
            # –ü–æ–∫—Ä–∏—Ç—Ç—è –∫–æ—Ä—Ç—É
            if 'surface' in matches.columns:
                print("  –ü–æ–∫—Ä–∏—Ç—Ç—è:")
                for surface, count in matches['surface'].value_counts().items():
                    print(f"    ‚Ä¢ {surface}: {count:,} –º–∞—Ç—á—ñ–≤")
            print()
        
        return {
            'matches': matches,
            'rankings': rankings,
            'players': players
        }


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    downloader = TennisDataDownloader()
    data = downloader.download_all()
    
    print("üöÄ –î–∞–Ω—ñ –≥–æ—Ç–æ–≤—ñ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ training dataset!")
    print("   –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: python tennis/prepare_training_data.py")
    print()


if __name__ == '__main__':
    main()
