"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π
"""
from extensions import db
from app import create_app
from services.football_api import FootballAPIService
from models import Team, Match
from datetime import datetime, timedelta

app = create_app()
football_api = FootballAPIService()

with app.app_context():
    print("=" * 60)
    print("–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó FOOTBALL-DATA.ORG API")
    print("=" * 60)
    
    # –õ–∏–≥–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    leagues = {
        'PL': 'Premier League',
        'PD': 'La Liga',
        'BL1': 'Bundesliga',
        'SA': 'Serie A',
        'FL1': 'Ligue 1'
    }
    
    total_matches = 0
    
    for league_code, league_name in leagues.items():
        print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞: {league_name} ({league_code})...")
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
            matches_data = football_api.get_upcoming_fixtures(
                league_code,
                days=14
            )
            
            if not matches_data:
                print(f"   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {league_name}")
                continue
            
            matches_added = 0
            
            for match in matches_data:
                # –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É
                home_team = Team.query.filter_by(
                    api_id=match['home_team_id']
                ).first()
                
                if not home_team:
                    home_team = Team(
                        api_id=match['home_team_id'],
                        name=match['home_team_name'],
                        league=league_code,
                        country='Unknown',
                        logo_url=match.get('home_team_logo', '')
                    )
                    db.session.add(home_team)
                
                # –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
                away_team = Team.query.filter_by(
                    api_id=match['away_team_id']
                ).first()
                
                if not away_team:
                    away_team = Team(
                        api_id=match['away_team_id'],
                        name=match['away_team_name'],
                        league=league_code,
                        country='Unknown',
                        logo_url=match.get('away_team_logo', '')
                    )
                    db.session.add(away_team)
                
                db.session.flush()  # –ü–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–∞–Ω–¥
                
                # –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç—á
                existing_match = Match.query.filter_by(
                    api_id=match['id']
                ).first()
                
                if not existing_match:
                    new_match = Match(
                        api_id=match['id'],
                        home_team_id=home_team.id,
                        away_team_id=away_team.id,
                        match_date=datetime.fromisoformat(match['date'].replace('Z', '+00:00')),
                        league=league_code,
                        status=match.get('status', 'SCHEDULED')
                    )
                    db.session.add(new_match)
                    matches_added += 1
            
            db.session.commit()
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—Ç—á–µ–π: {matches_added}")
            total_matches += matches_added
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            db.session.rollback()
    
    print(f"\n{'=' * 60}")
    print(f"‚úÖ –ò–¢–û–ì–û –ó–ê–ì–†–£–ñ–ï–ù–û –ú–ê–¢–ß–ï–ô: {total_matches}")
    print(f"üìä –ö–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: {Team.query.count()}")
    print(f"üìä –ú–∞—Ç—á–µ–π –≤ –±–∞–∑–µ: {Match.query.count()}")
    print(f"{'=' * 60}")
