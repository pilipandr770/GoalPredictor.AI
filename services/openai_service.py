"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""
from openai import OpenAI
from config import Config


class OpenAIService:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è OpenAI API
    """
    
    def __init__(self):
        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.model = Config.OPENAI_MODEL
    
    def generate_match_explanation(self, prediction, home_stats, away_stats, match_data):
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
        Args:
            prediction: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç ML –º–æ–¥–µ–ª–∏
            home_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
            away_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–µ–∑–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            match_data: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
        prompt = self._build_explanation_prompt(
            prediction,
            home_stats,
            away_stats,
            match_data
        )
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": self._get_system_prompt()
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.7,
                max_tokens=500
            )
            
            explanation = response.choices[0].message.content.strip()
            return explanation
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return self._generate_fallback_explanation(prediction, home_stats, away_stats)
    
    def _get_system_prompt(self):
        """
        –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è GPT
        """
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –û–±—ä—è—Å–Ω—è–π –ö–†–ê–¢–ö–û –∏ –ß–ï–¢–ö–û (–º–∞–∫—Å–∏–º—É–º 5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
2. –ò—Å–ø–æ–ª—å–∑—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –¶–ò–§–†–´ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
3. –ù–ï –î–ê–í–ê–ô —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏
4. –ì–æ–≤–æ—Ä–∏ –æ –í–ï–†–û–Ø–¢–ù–û–°–¢–ò, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö
5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ (‚öΩüéØüìä)
6. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (2-3 –ø—É–Ω–∫—Ç–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏)
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ñ–æ—Ä–º–∞, –ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏)
4. –û–≥–æ–≤–æ—Ä–∫–∞ –æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:
"‚öΩ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞ (73%)

üéØ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
‚Ä¢ –û–±–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–±–∏–≤–∞—é—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ 2+ –≥–æ–ª–∞ –∑–∞ –∏–≥—Ä—É
‚Ä¢ –í 7 –∏–∑ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π —Ö–æ–∑—è–µ–≤ –±—ã–ª–æ >2.5 –≥–æ–ª–æ–≤
‚Ä¢ –ì–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 1.8 –≥–æ–ª–∞ –≤ –≤—ã–µ–∑–¥–Ω—ã—Ö –º–∞—Ç—á–∞—Ö

üìä –û–±–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ –∏ –∏–≥—Ä–∞—é—Ç –≤ –∞—Ç–∞–∫—É—é—â–∏–π —Ñ—É—Ç–±–æ–ª. –í –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –æ–±—ã—á–Ω–æ –º–Ω–æ–≥–æ –≥–æ–ª–æ–≤.

‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
"""
    
    def _build_explanation_prompt(self, prediction, home_stats, away_stats, match_data):
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        """
        prob = prediction['probability']
        confidence = prediction['confidence']
        
        prompt = f"""–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á:

–ú–ê–¢–ß:
{match_data['home_team_name']} vs {match_data['away_team_name']}
–õ–∏–≥–∞: {match_data.get('league', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–î–∞—Ç–∞: {match_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–ü–†–û–ì–ù–û–ó –ú–û–î–ï–õ–ò:
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å Over 2.5 –≥–æ–ª–æ–≤: {prob:.1%}
–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ú–ê–®–ù–ï–ô –ö–û–ú–ê–ù–î–´ ({match_data['home_team_name']}):
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –≥–æ–ª—ã –∑–∞ –º–∞—Ç—á: {home_stats.get('avg_goals_scored', 0):.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {home_stats.get('avg_goals_conceded', 0):.2f}
‚Ä¢ Over 2.5 –≤ –∏—Ö –º–∞—Ç—á–∞—Ö: {home_stats.get('over_2_5_percentage', 0):.0%}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ä–º–∞: {home_stats.get('last_5_form', 'N/A')}
‚Ä¢ BTTS –ø—Ä–æ—Ü–µ–Ω—Ç: {home_stats.get('btts_percentage', 0):.0%}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–û–°–¢–ï–í–û–ô –ö–û–ú–ê–ù–î–´ ({match_data['away_team_name']}):
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –≥–æ–ª—ã –∑–∞ –º–∞—Ç—á: {away_stats.get('avg_goals_scored', 0):.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {away_stats.get('avg_goals_conceded', 0):.2f}
‚Ä¢ Over 2.5 –≤ –∏—Ö –º–∞—Ç—á–∞—Ö: {away_stats.get('over_2_5_percentage', 0):.0%}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ä–º–∞: {away_stats.get('last_5_form', 'N/A')}
‚Ä¢ BTTS –ø—Ä–æ—Ü–µ–Ω—Ç: {away_stats.get('btts_percentage', 0):.0%}

–ó–ê–î–ê–ß–ê:
–û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å –¥–∞–ª–∞ —Ç–∞–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å. –£–∫–∞–∂–∏ –≥–ª–∞–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑.
–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã, –Ω–æ –ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.
"""
        return prompt
    
    def _generate_fallback_explanation(self, prediction, home_stats, away_stats):
        """
        –†–µ–∑–µ—Ä–≤–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        prob = prediction['probability']
        
        explanation = f"‚öΩ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å Over 2.5 –≥–æ–ª–æ–≤: {prob:.1%}\n\n"
        
        explanation += "üéØ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:\n"
        explanation += f"‚Ä¢ –î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–∏–≤–∞–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º {home_stats.get('avg_goals_scored', 0):.1f} –≥–æ–ª–∞\n"
        explanation += f"‚Ä¢ –ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–∏–≤–∞–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º {away_stats.get('avg_goals_scored', 0):.1f} –≥–æ–ª–∞\n"
        explanation += f"‚Ä¢ Over 2.5 –≤ –º–∞—Ç—á–∞—Ö —Ö–æ–∑—è–µ–≤: {home_stats.get('over_2_5_percentage', 0):.0%}\n"
        explanation += f"‚Ä¢ Over 2.5 –≤ –º–∞—Ç—á–∞—Ö –≥–æ—Å—Ç–µ–π: {away_stats.get('over_2_5_percentage', 0):.0%}\n\n"
        
        if prob >= 0.7:
            explanation += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞.\n\n"
        elif prob >= 0.55:
            explanation += "üìä –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥.\n\n"
        else:
            explanation += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –¥–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–º –º–∞—Ç—á–µ.\n\n"
        
        explanation += "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        
        return explanation
    
    def generate_daily_summary(self, predictions):
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –¥–µ–Ω—å
        
        Args:
            predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        """
        if not predictions:
            return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        high_confidence = [p for p in predictions if p['confidence'] == 'high']
        total_matches = len(predictions)
        
        prompt = f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–î–ê–ù–ù–´–ï:
–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_matches}
–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {len(high_confidence)}

–¢–û–ü-5 –ü–†–û–ì–ù–û–ó–û–í:
"""
        
        for i, pred in enumerate(predictions[:5], 1):
            match = pred['match_info']
            prompt += f"\n{i}. {match['home_team']} vs {match['away_team']}"
            prompt += f"\n   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å Over 2.5: {pred['probability']:.0%}"
            prompt += f"\n   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred['confidence']}\n"
        
        prompt += """
–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–∑–æ—Ä–æ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –¥–µ–Ω—å.
–ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç GoalPredictor.AI. –°–æ–∑–¥–∞–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.8,
                max_tokens=300
            )
            
            summary = response.choices[0].message.content.strip()
            return summary
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
            return f"‚öΩ –°–µ–≥–æ–¥–Ω—è {total_matches} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –∏–∑ –Ω–∏—Ö {len(high_confidence)} —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é!"
    
    def explain_model_accuracy(self, correct_predictions, total_predictions):
        """
        –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        accuracy = correct_predictions / total_predictions if total_predictions > 0 else 0
        
        prompt = f"""–û–±—ä—è—Å–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:

–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {correct_predictions}
–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_predictions}
–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}

–ó–∞–¥–∞—á–∞: –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—å, —Ö–æ—Ä–æ—à–æ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
–ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º. 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.6,
                max_tokens=200
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return f"–ù–∞—à–∞ –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.1%}, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è {'—Ö–æ—Ä–æ—à–∏–º' if accuracy >= 0.6 else '—Å—Ä–µ–¥–Ω–∏–º'} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == '__main__':
    service = OpenAIService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_prediction = {
        'probability': 0.73,
        'confidence': 'high'
    }
    
    test_home_stats = {
        'avg_goals_scored': 2.1,
        'avg_goals_conceded': 1.2,
        'over_2_5_percentage': 0.65,
        'last_5_form': 'WWDWL',
        'btts_percentage': 0.60
    }
    
    test_away_stats = {
        'avg_goals_scored': 1.8,
        'avg_goals_conceded': 1.5,
        'over_2_5_percentage': 0.70,
        'last_5_form': 'WDLWW',
        'btts_percentage': 0.75
    }
    
    test_match = {
        'home_team_name': 'Manchester United',
        'away_team_name': 'Liverpool',
        'league': 'Premier League',
        'date': '2025-10-05'
    }
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI Service\n")
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...\n")
    
    explanation = service.generate_match_explanation(
        test_prediction,
        test_home_stats,
        test_away_stats,
        test_match
    )
    
    print("="*60)
    print(explanation)
    print("="*60)
