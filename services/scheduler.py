"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""
import os
import sys
from datetime import datetime, time
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models import Match, Team, Prediction, User
from services.football_api import FootballAPIService
from ml.predict import PredictionService
from services.openai_service import OpenAIService
from app import db


class TaskScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    """
    
    def __init__(self, app):
        self.app = app
        self.scheduler = BackgroundScheduler()
        self.football_api = FootballAPIService()
        self.prediction_service = PredictionService()
        self.openai_service = OpenAIService()
    
    def start(self):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        """
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 07:00
        self.scheduler.add_job(
            self.update_fixtures,
            trigger=CronTrigger(hour=7, minute=0),
            id='update_fixtures',
            name='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π',
            replace_existing=True
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 08:00
        self.scheduler.add_job(
            self.generate_predictions,
            trigger=CronTrigger(hour=8, minute=0),
            id='generate_predictions',
            name='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤',
            replace_existing=True
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        self.scheduler.add_job(
            self.update_results,
            trigger='interval',
            hours=2,
            id='update_results',
            name='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π',
            replace_existing=True
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 02:00)
        self.scheduler.add_job(
            self.update_team_statistics,
            trigger=CronTrigger(day_of_week='mon', hour=2, minute=0),
            id='update_team_stats',
            name='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥',
            replace_existing=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # self.scheduler.add_job(
        #     self.send_daily_predictions,
        #     trigger=CronTrigger(hour=9, minute=0),
        #     id='send_predictions',
        #     name='–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        # )
        
        self.scheduler.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
        self._print_jobs()
    
    def _print_jobs(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        print("\nüìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for job in self.scheduler.get_jobs():
            print(f"   ‚Ä¢ {job.name} (—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time})")
        print()
    
    def update_fixtures(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
        """
        with self.app.app_context():
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç—á–µ–π...")
            
            try:
                from config import Config
                
                # –î–ª—è –∫–∞–∂–¥–æ–π –ª–∏–≥–∏
                for league_name, league_id in Config.LEAGUES.items():
                    fixtures = self.football_api.get_upcoming_fixtures(league_id, days=7)
                    
                    for fixture in fixtures:
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ç—á
                        match = Match.query.filter_by(api_id=fixture['id']).first()
                        
                        if not match:
                            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á
                            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
                            home_team = self._get_or_create_team(
                                fixture['home_team_id'],
                                fixture['home_team_name'],
                                league_name
                            )
                            
                            away_team = self._get_or_create_team(
                                fixture['away_team_id'],
                                fixture['away_team_name'],
                                league_name
                            )
                            
                            match = Match(
                                api_id=fixture['id'],
                                home_team_id=home_team.id,
                                away_team_id=away_team.id,
                                league=league_name,
                                match_date=datetime.fromisoformat(fixture['date'].replace('Z', '+00:00')),
                                status=fixture['status']
                            )
                            
                            db.session.add(match)
                
                db.session.commit()
                print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def _get_or_create_team(self, api_id, name, league):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        team = Team.query.filter_by(api_id=api_id).first()
        
        if not team:
            team = Team(
                api_id=api_id,
                name=name,
                league=league,
                country='Unknown'
            )
            db.session.add(team)
            db.session.flush()
        
        return team
    
    def generate_predictions(self):
        """
        –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏
        """
        with self.app.app_context():
            print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
            
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                today = datetime.utcnow().date()
                
                matches = Match.query.filter(
                    db.func.date(Match.match_date) == today,
                    Match.status == 'scheduled'
                ).all()
                
                generated = 0
                
                for match in matches:
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–≥–Ω–æ–∑
                    existing = Prediction.query.filter_by(match_id=match.id).first()
                    
                    if existing:
                        continue
                    
                    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
                    match_data = {
                        'home_team_id': match.home_team.api_id,
                        'away_team_id': match.away_team.api_id,
                        'home_team_name': match.home_team.name,
                        'away_team_name': match.away_team.name,
                        'league': match.league,
                        'date': match.match_date
                    }
                    
                    prediction_data = self.prediction_service.predict_match(
                        match_data,
                        include_explanation=True
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
                    prediction = Prediction(
                        match_id=match.id,
                        probability=prediction_data['probability'],
                        confidence=prediction_data['confidence'],
                        explanation=prediction_data.get('explanation'),
                        factors=prediction_data.get('features'),
                        model_version=prediction_data.get('model_version')
                    )
                    
                    db.session.add(prediction)
                    generated += 1
                
                db.session.commit()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {generated}")
                
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
    
    def update_results(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        """
        with self.app.app_context():
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π...")
            
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º live –∏–ª–∏ finished –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                matches = Match.query.filter(
                    Match.status.in_(['live', 'finished']),
                    Match.total_goals.is_(None)
                ).all()
                
                updated = 0
                
                for match in matches:
                    result = self.football_api.update_match_results(match.api_id)
                    
                    if result:
                        match.home_score = result['home_score']
                        match.away_score = result['away_score']
                        match.total_goals = result['total_goals']
                        match.status = result['status']
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
                        prediction = Prediction.query.filter_by(match_id=match.id).first()
                        
                        if prediction:
                            predicted_over = prediction.probability >= 0.55
                            actual_over = result['over_2_5']
                            
                            prediction.is_correct = (predicted_over == actual_over)
                            prediction.actual_result = 'Over 2.5' if actual_over else 'Under 2.5'
                        
                        updated += 1
                
                db.session.commit()
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {updated}")
                
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def update_team_statistics(self):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        """
        with self.app.app_context():
            print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥...")
            
            try:
                teams = Team.query.all()
                updated = 0
                
                from config import Config
                
                for team in teams:
                    # –ü–æ–ª—É—á–∏—Ç—å ID –ª–∏–≥–∏
                    league_id = Config.LEAGUES.get(team.league)
                    
                    if not league_id:
                        continue
                    
                    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    stats = self.football_api.get_team_statistics(team.api_id, league_id)
                    
                    if stats:
                        team.total_matches = stats.get('total_matches', 0)
                        team.goals_scored = stats.get('goals_scored', 0)
                        team.goals_conceded = stats.get('goals_conceded', 0)
                        team.avg_goals_per_match = stats.get('avg_goals_scored', 0)
                        team.last_update = datetime.utcnow()
                        
                        updated += 1
                
                db.session.commit()
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {updated}")
                
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def send_daily_predictions(self):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        with self.app.app_context():
            print("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
            
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                premium_users = User.query.filter_by(is_premium=True).all()
                
                # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.utcnow().date()
                
                predictions = db.session.query(Prediction).join(
                    Match,
                    Prediction.match_id == Match.id
                ).filter(
                    db.func.date(Match.match_date) == today,
                    Prediction.confidence.in_(['high', 'medium'])
                ).order_by(
                    Prediction.probability.desc()
                ).limit(5).all()
                
                if not predictions:
                    print("   –ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    return
                
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Flask-Mail
                
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {len(premium_users)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.shutdown()
        print("‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def start_scheduler(app):
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    """
    scheduler = TaskScheduler(app)
    scheduler.start()
    return scheduler


if __name__ == '__main__':
    from app import create_app
    
    app = create_app()
    scheduler = start_scheduler(app)
    
    print("\n‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        import time
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        scheduler.stop()
