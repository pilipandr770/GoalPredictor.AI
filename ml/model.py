"""
–ú–æ–¥—É–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ä–∞—Å—á–µ—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ >2.5 –≥–æ–ª–æ–≤
"""
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
import lightgbm as lgb
import joblib


class GoalPredictorModel:
    """
    ML-–º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
    """
    
    def __init__(self, model_path='ml/models'):
        self.model_path = model_path
        self.model = None
        self.scaler = StandardScaler()
        self.feature_names = []
        self.model_version = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(model_path, exist_ok=True)
    
    def create_features(self, home_stats, away_stats, match_info=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        
        Args:
            home_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
            away_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–µ–∑–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            match_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        features = {}
        
        # === –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
        # –°—Ä–µ–¥–Ω–∏–µ –≥–æ–ª—ã –∑–∞ –º–∞—Ç—á
        features['home_avg_goals_scored'] = home_stats.get('avg_goals_scored', 0)
        features['home_avg_goals_conceded'] = home_stats.get('avg_goals_conceded', 0)
        features['away_avg_goals_scored'] = away_stats.get('avg_goals_scored', 0)
        features['away_avg_goals_conceded'] = away_stats.get('avg_goals_conceded', 0)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≥–æ–ª–æ–≤
        features['expected_home_goals'] = (
            home_stats.get('avg_goals_scored', 0) + 
            away_stats.get('avg_goals_conceded', 0)
        ) / 2
        
        features['expected_away_goals'] = (
            away_stats.get('avg_goals_scored', 0) + 
            home_stats.get('avg_goals_conceded', 0)
        ) / 2
        
        features['total_expected_goals'] = features['expected_home_goals'] + features['expected_away_goals']
        
        # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Over 2.5 ===
        features['home_over_2_5_percentage'] = home_stats.get('over_2_5_percentage', 0)
        features['away_over_2_5_percentage'] = away_stats.get('over_2_5_percentage', 0)
        features['combined_over_2_5'] = (
            features['home_over_2_5_percentage'] + 
            features['away_over_2_5_percentage']
        ) / 2
        
        # === –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π) ===
        features['home_recent_form_score'] = self._calculate_form_score(
            home_stats.get('last_5_form', '')
        )
        features['away_recent_form_score'] = self._calculate_form_score(
            away_stats.get('last_5_form', '')
        )
        
        # === –î–æ–º–∞—à–Ω–∏–µ/–í—ã–µ–∑–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ===
        features['home_home_avg_goals'] = home_stats.get('home_avg_goals_scored', 0)
        features['away_away_avg_goals'] = away_stats.get('away_avg_goals_scored', 0)
        
        # === BTTS (Both Teams To Score) ===
        features['home_btts_percentage'] = home_stats.get('btts_percentage', 0)
        features['away_btts_percentage'] = away_stats.get('btts_percentage', 0)
        
        # === –ó–∞—â–∏—Ç–∞ ===
        features['home_clean_sheets_percentage'] = home_stats.get('clean_sheets_percentage', 0)
        features['away_clean_sheets_percentage'] = away_stats.get('clean_sheets_percentage', 0)
        
        # === –°–∏–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ===
        features['home_total_matches'] = home_stats.get('total_matches', 0)
        features['away_total_matches'] = away_stats.get('total_matches', 0)
        features['home_wins'] = home_stats.get('wins', 0)
        features['away_wins'] = away_stats.get('wins', 0)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        if features['home_total_matches'] > 0:
            features['home_win_percentage'] = features['home_wins'] / features['home_total_matches']
        else:
            features['home_win_percentage'] = 0
        
        if features['away_total_matches'] > 0:
            features['away_win_percentage'] = features['away_wins'] / features['away_total_matches']
        else:
            features['away_win_percentage'] = 0
        
        # === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ ===
        if match_info:
            # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤—ã—Ö–æ–¥–Ω—ã–µ –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–µ)
            if 'date' in match_info:
                match_date = match_info['date']
                features['is_weekend'] = 1 if match_date.weekday() >= 5 else 0
            
            # –í–∞–∂–Ω–æ—Å—Ç—å –ª–∏–≥–∏ (—Ç–æ–ø-–ª–∏–≥–∏ –±–æ–ª–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–µ)
            league_weights = {
                'Premier League': 1.0,
                'La Liga': 0.95,
                'Bundesliga': 1.1,  # –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
                'Serie A': 0.85,     # –°–µ—Ä–∏—è –ê –±–æ–ª–µ–µ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–∞—è
                'Ligue 1': 0.9
            }
            features['league_weight'] = league_weights.get(match_info.get('league', ''), 0.9)
        else:
            features['is_weekend'] = 0
            features['league_weight'] = 0.9
        
        # === –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
        features['goals_momentum'] = (
            features['home_avg_goals_scored'] * features['away_avg_goals_conceded'] +
            features['away_avg_goals_scored'] * features['home_avg_goals_conceded']
        )
        
        features['attacking_strength_diff'] = abs(
            features['home_avg_goals_scored'] - features['away_avg_goals_scored']
        )
        
        features['defensive_weakness'] = (
            features['home_avg_goals_conceded'] + features['away_avg_goals_conceded']
        )
        
        self.feature_names = list(features.keys())
        return features
    
    def _calculate_form_score(self, form_string):
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        W (win) = 3, D (draw) = 1, L (loss) = 0
        """
        if not form_string:
            return 0
        
        score_map = {'W': 3, 'D': 1, 'L': 0}
        scores = [score_map.get(char, 0) for char in form_string]
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –≤–∞–∂–Ω–µ–µ)
        weights = [1.5, 1.3, 1.1, 1.0, 0.9][:len(scores)]
        weighted_score = sum(s * w for s, w in zip(scores, weights))
        
        max_score = sum([3 * w for w in weights])
        return weighted_score / max_score if max_score > 0 else 0
    
    def train(self, training_data, target_column='over_2_5'):
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            training_data: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            target_column: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        """
        print("üéØ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤—ã—Ö)
        exclude_cols = ['over_2_5', 'btts', 'date', 'league']
        self.feature_names = [col for col in training_data.columns if col not in exclude_cols]
        
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(self.feature_names)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X = training_data[self.feature_names]
        y = training_data[target_column]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        X_scaled = self.scaler.fit_transform(X)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=0.2, random_state=42, stratify=y
        )
        
        # –û–±—É—á–µ–Ω–∏–µ LightGBM (–±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π)
        self.model = lgb.LGBMClassifier(
            n_estimators=200,
            learning_rate=0.05,
            max_depth=7,
            num_leaves=31,
            random_state=42,
            verbose=-1
        )
        
        self.model.fit(
            X_train, y_train,
            eval_set=[(X_test, y_test)],
            eval_metric='auc'
        )
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        train_score = self.model.score(X_train, y_train)
        test_score = self.model.score(X_test, y_test)
        
        # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
        cv_scores = cross_val_score(
            self.model, X_scaled, y, cv=5, scoring='roc_auc'
        )
        
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"   Train Accuracy: {train_score:.2%}")
        print(f"   Test Accuracy: {test_score:.2%}")
        print(f"   CV ROC-AUC: {cv_scores.mean():.2%} (+/- {cv_scores.std():.2%})")
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = pd.DataFrame({
            'feature': self.feature_names,
            'importance': self.model.feature_importances_
        }).sort_values('importance', ascending=False)
        
        print("\nüìä –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        print(feature_importance.head(10))
        
        return {
            'train_score': train_score,
            'test_score': test_score,
            'cv_score': cv_scores.mean(),
            'feature_importance': feature_importance
        }
    
    def predict(self, home_stats, away_stats, match_info=None):
        """
        –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        
        Returns:
            dict: –ü—Ä–æ–≥–Ω–æ–∑ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∏ —É—Ä–æ–≤–Ω–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        if self.model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ train() –∏–ª–∏ load_model()")
        
        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = self.create_features(home_stats, away_stats, match_info)
        
        return self.predict_from_features(features)
    
    def predict_from_features(self, features):
        """
        –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        
        Args:
            features: dict —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –º–∞—Ç—á–∞
        
        Returns:
            dict: –ü—Ä–æ–≥–Ω–æ–∑ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
        """
        if self.model is None:
            raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ train() –∏–ª–∏ load_model()")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ DataFrame
        X = pd.DataFrame([features])[self.feature_names]
        X_scaled = self.scaler.transform(X)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–æ–∏—Ö –∫–ª–∞—Å—Å–æ–≤
        probabilities = self.model.predict_proba(X_scaled)[0]
        over_2_5_prob = probabilities[1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å Over 2.5
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if over_2_5_prob >= 0.75:
            confidence = 'high'
            recommendation = '–°–∏–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
        elif over_2_5_prob >= 0.65:
            confidence = 'medium'
            recommendation = '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
        elif over_2_5_prob >= 0.55:
            confidence = 'low'
            recommendation = '–°–ª–∞–±–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
        else:
            confidence = 'very_low'
            recommendation = '–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è'
        
        return {
            'over_2_5': over_2_5_prob,
            'under_2_5': probabilities[0],
            'confidence': confidence,
            'recommendation': recommendation,
            'prediction': 'Over 2.5' if over_2_5_prob >= 0.5 else 'Under 2.5',
            'model_version': self.model_version
        }
    
    def save_model(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –¥–∏—Å–∫"""
        if filename is None:
            filename = f'goal_predictor_model_{self.model_version}.pkl'
        
        filepath = os.path.join(self.model_path, filename)
        
        model_data = {
            'model': self.model,
            'scaler': self.scaler,
            'feature_names': self.feature_names,
            'model_version': self.model_version
        }
        
        joblib.dump(model_data, filepath)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        
        return filepath
    
    def load_model(self, filename=None):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å (v2.0)
            over_2_5_path = os.path.join(self.model_path, 'over_2_5_model.pkl')
            features_path = os.path.join(self.model_path, 'feature_columns.pkl')
            
            if os.path.exists(over_2_5_path) and os.path.exists(features_path):
                # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ (–∏–∑ ml/train.py)
                self.model = joblib.load(over_2_5_path)
                self.feature_names = joblib.load(features_path)
                self.model_version = 'v2.0'
                
                print(f"üìÇ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {over_2_5_path}")
                print(f"   –í–µ—Ä—Å–∏—è: {self.model_version}")
                return True
                
        except Exception as e:
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        try:
            if filename is None:
                # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å
                model_files = [f for f in os.listdir(self.model_path) 
                              if f.endswith('.pkl') and 'goal_predictor' in f]
                if not model_files:
                    raise FileNotFoundError("–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                filename = sorted(model_files)[-1]
            
            # –ï—Å–ª–∏ filename —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
            if os.path.dirname(filename):
                filepath = filename
            else:
                filepath = os.path.join(self.model_path, filename)
            
            model_data = joblib.load(filepath)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            if isinstance(model_data, dict):
                self.model = model_data['model']
                self.scaler = model_data['scaler']
                self.feature_names = model_data['feature_names']
                self.model_version = model_data['model_version']
            else:
                # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–æ–¥–µ–ª—å
                self.model = model_data
            
            print(f"üìÇ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filepath}")
            print(f"   –í–µ—Ä—Å–∏—è: {self.model_version}")
            
            return True
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏: {e}")
            raise
