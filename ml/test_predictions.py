"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import pandas as pd

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ml.model import GoalPredictorModel
from ml.train import calculate_team_statistics, load_kaggle_dataset


def test_model_predictions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö"""
    
    print("="*60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ GoalPredictor.AI")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
    print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = GoalPredictorModel()
    
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å
    model_files = [f for f in os.listdir('ml/models') if f.endswith('.pkl')]
    if not model_files:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python ml/train.py")
        return
    
    latest_model = sorted(model_files)[-1]
    model.load_model(latest_model)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {latest_model}")
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    print("\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    dataset_path = os.path.join('data', 'processed', 'football_matches.csv')
    df = load_kaggle_dataset(dataset_path)
    
    # –í–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
    test_matches = df.tail(20)
    
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {len(test_matches)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö...\n")
    
    correct_predictions = 0
    total_predictions = 0
    
    for idx, match in test_matches.iterrows():
        # –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        history = df[df['Date'] < match['Date']]
        
        if len(history) < 50:
            continue
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        home_stats = calculate_team_statistics(history, match['HomeTeam'], is_home=True)
        away_stats = calculate_team_statistics(history, match['AwayTeam'], is_home=False)
        
        if home_stats is None or away_stats is None:
            continue
        
        if home_stats['total_matches'] < 5 or away_stats['total_matches'] < 5:
            continue
        
        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
        match_info = {
            'date': match['Date'],
            'league': match['League']
        }
        
        features = model.create_features(home_stats, away_stats, match_info)
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict_from_features(features)
        over_2_5_prob = prediction['over_2_5']
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        actual_over_2_5 = match['Over2_5']
        predicted_over_2_5 = 1 if over_2_5_prob >= 0.5 else 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
        is_correct = (predicted_over_2_5 == actual_over_2_5)
        if is_correct:
            correct_predictions += 1
        total_predictions += 1
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_icon = "‚úÖ" if is_correct else "‚ùå"
        actual_goals = int(match['FTHG'] + match['FTAG'])
        
        print(f"{result_icon} {match['HomeTeam'][:20]:20} vs {match['AwayTeam'][:20]:20}")
        print(f"   –°—á–µ—Ç: {int(match['FTHG'])}-{int(match['FTAG'])} (–ì–æ–ª–æ–≤: {actual_goals})")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ Over 2.5: {over_2_5_prob:.1%} | –§–∞–∫—Ç: {'–î–ê' if actual_over_2_5 else '–ù–ï–¢'}")
        print()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (correct_predictions / total_predictions * 100) if total_predictions > 0 else 0
    
    print("="*60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: {total_predictions}")
    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {correct_predictions}")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    print("="*60)


if __name__ == '__main__':
    test_model_predictions()
