"""
–û–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ml.model import GoalPredictorModel
from services.football_api import FootballAPIService


def load_kaggle_dataset(filepath):
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle
    
    –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ Kaggle:
    - date_utc, home_team, away_team, fulltime_home, fulltime_away, competition_name
    
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
    - Date, HomeTeam, AwayTeam, FTHG, FTAG, League
    """
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞—Ç–∞—Å–µ—Ç: {filepath}")
    
    df = pd.read_csv(filepath)
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Kaggle –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    column_mapping = {
        'date_utc': 'Date',
        'home_team': 'HomeTeam',
        'away_team': 'AwayTeam',
        'fulltime_home': 'FTHG',
        'fulltime_away': 'FTAG',
        'competition_name': 'League'
    }
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏
    df = df.rename(columns=column_mapping)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    
    # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    if 'status' in df.columns:
        df = df[df['status'] == 'FINISHED']
    
    # –£–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≥–æ–ª–æ–≤
    df = df.dropna(subset=['FTHG', 'FTAG'])
    
    # –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥–æ–ª—ã - —á–∏—Å–ª–∞
    df['FTHG'] = pd.to_numeric(df['FTHG'], errors='coerce')
    df['FTAG'] = pd.to_numeric(df['FTAG'], errors='coerce')
    
    # –í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤
    df['TotalGoals'] = df['FTHG'] + df['FTAG']
    df['Over2_5'] = (df['TotalGoals'] > 2.5).astype(int)
    df['BTTS'] = ((df['FTHG'] > 0) & (df['FTAG'] > 0)).astype(int)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π")
    print(f"   –ü–µ—Ä–∏–æ–¥: {df['Date'].min()} - {df['Date'].max()}")
    print(f"   Over 2.5: {df['Over2_5'].mean():.1%}")
    print(f"   BTTS: {df['BTTS'].mean():.1%}")
    
    return df


def calculate_team_statistics(df, team_name, is_home=None, last_n_matches=10):
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π
    
    Args:
        df: DataFrame —Å –º–∞—Ç—á–∞–º–∏
        team_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        is_home: True –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö, False –¥–ª—è –≤—ã–µ–∑–¥–Ω—ã—Ö, None –¥–ª—è –≤—Å–µ—Ö
        last_n_matches: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    # –§–∏–ª—å—Ç—Ä –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
    if is_home is True:
        team_matches = df[df['HomeTeam'] == team_name].copy()
        goals_scored_col = 'FTHG'
        goals_conceded_col = 'FTAG'
    elif is_home is False:
        team_matches = df[df['AwayTeam'] == team_name].copy()
        goals_scored_col = 'FTAG'
        goals_conceded_col = 'FTHG'
    else:
        home_matches = df[df['HomeTeam'] == team_name].copy()
        away_matches = df[df['AwayTeam'] == team_name].copy()
        
        home_matches['GoalsScored'] = home_matches['FTHG']
        home_matches['GoalsConceded'] = home_matches['FTAG']
        away_matches['GoalsScored'] = away_matches['FTAG']
        away_matches['GoalsConceded'] = away_matches['FTHG']
        
        team_matches = pd.concat([home_matches, away_matches])
        goals_scored_col = 'GoalsScored'
        goals_conceded_col = 'GoalsConceded'
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    team_matches = team_matches.sort_values('Date', ascending=False)
    
    # –í–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∞—Ç—á–µ–π
    recent_matches = team_matches.head(last_n_matches)
    
    if len(recent_matches) == 0:
        return None
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {
        'total_matches': len(recent_matches),
        'avg_goals_scored': recent_matches[goals_scored_col].mean(),
        'avg_goals_conceded': recent_matches[goals_conceded_col].mean(),
        'total_goals_avg': recent_matches['TotalGoals'].mean(),
        'over_2_5_percentage': recent_matches['Over2_5'].mean(),
        'btts_percentage': recent_matches['BTTS'].mean(),
        'home_avg_goals_scored': recent_matches[goals_scored_col].mean(),  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        'away_avg_goals_scored': recent_matches[goals_scored_col].mean(),  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    }
    
    # –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π)
    last_5 = recent_matches.head(5)
    form = []
    
    for _, match in last_5.iterrows():
        if is_home is True:
            if match['FTHG'] > match['FTAG']:
                form.append('W')
            elif match['FTHG'] < match['FTAG']:
                form.append('L')
            else:
                form.append('D')
        elif is_home is False:
            if match['FTAG'] > match['FTHG']:
                form.append('W')
            elif match['FTAG'] < match['FTHG']:
                form.append('L')
            else:
                form.append('D')
        else:
            # –û–±—â–∞—è —Ñ–æ—Ä–º–∞
            if 'GoalsScored' in match:
                if match['GoalsScored'] > match['GoalsConceded']:
                    form.append('W')
                elif match['GoalsScored'] < match['GoalsConceded']:
                    form.append('L')
                else:
                    form.append('D')
    
    stats['last_5_form'] = ''.join(form)
    stats['wins'] = form.count('W')
    stats['draws'] = form.count('D')
    stats['losses'] = form.count('L')
    
    # –ß–∏—Å—Ç—ã–µ —Å—á–µ—Ç–∞
    clean_sheets = (recent_matches[goals_conceded_col] == 0).sum()
    stats['clean_sheets_percentage'] = clean_sheets / len(recent_matches)
    
    return stats


def prepare_training_data(df, min_matches=5):
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    """
    print("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    
    model = GoalPredictorModel()
    training_samples = []
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    df = df.sort_values('Date').reset_index(drop=True)
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π
    for idx in range(len(df)):
        match = df.iloc[idx]
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        history = df.iloc[:idx]
        
        if len(history) < min_matches * 2:
            continue
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
        home_stats = calculate_team_statistics(history, match['HomeTeam'], is_home=True)
        away_stats = calculate_team_statistics(history, match['AwayTeam'], is_home=False)
        
        if home_stats is None or away_stats is None:
            continue
        
        if home_stats['total_matches'] < min_matches or away_stats['total_matches'] < min_matches:
            continue
        
        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
        match_info = {
            'date': match['Date'],
            'league': match.get('League', 'Unknown')
        }
        
        features = model.create_features(home_stats, away_stats, match_info)
        features['over_2_5'] = match['Over2_5']
        features['btts'] = match['BTTS']
        
        training_samples.append(features)
        
        if len(training_samples) % 500 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(training_samples)} –º–∞—Ç—á–µ–π...")
    
    training_df = pd.DataFrame(training_samples)
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(training_df)} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    print(f"   Over 2.5: {training_df['over_2_5'].mean():.1%}")
    print(f"   BTTS: {training_df['btts'].mean():.1%}")
    
    return training_df


def train_model_from_kaggle(dataset_path):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ Kaggle
    """
    print("="*50)
    print("üöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ GoalPredictor.AI")
    print("="*50)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç
    df = load_kaggle_dataset(dataset_path)
    
    # –§–∏–ª—å—Ç—Ä —Ç–æ–ø-5 –ª–∏–≥ (–Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–≥ –∏–∑ Kaggle)
    top_leagues = [
        'Premier League',       # –ê–Ω–≥–ª–∏—è
        'LaLiga EA Sports',     # –ò—Å–ø–∞–Ω–∏—è
        'Bundesliga',           # –ì–µ—Ä–º–∞–Ω–∏—è
        'Serie A',              # –ò—Ç–∞–ª–∏—è
        'Ligue 1'               # –§—Ä–∞–Ω—Ü–∏—è
    ]
    if 'League' in df.columns:
        df = df[df['League'].isin(top_leagues)]
        print(f"\nüìä –§–∏–ª—å—Ç—Ä —Ç–æ–ø-5 –ª–∏–≥: {len(df)} –º–∞—Ç—á–µ–π")
        print(f"   –õ–∏–≥–∏: {df['League'].unique()}")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 —Å–µ–∑–æ–Ω–æ–≤ (–¥–∞—Ç–∞—Å–µ—Ç –∏ —Ç–∞–∫ –∏–∑ 2024-2025)
    # –£–±—Ä–∞—Ç—å timezone –∏–∑ –¥–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    df['Date'] = df['Date'].dt.tz_localize(None)
    cutoff_date = datetime.now() - timedelta(days=365*2)
    df = df[df['Date'] >= cutoff_date]
    print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–µ–∑–æ–Ω–∞: {len(df)} –º–∞—Ç—á–µ–π")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    training_data = prepare_training_data(df)
    
    # –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å
    model = GoalPredictorModel()
    results = model.train(training_data, target_column='over_2_5')
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å
    model.save_model()
    
    print("\n" + "="*50)
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print("="*50)
    
    return model, results


if __name__ == '__main__':
    # –ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É Kaggle (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)
    dataset_path = os.path.join('data', 'processed', 'football_matches.csv')
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å (—Å—ã—Ä–æ–π –¥–∞—Ç–∞—Å–µ—Ç)
    if not os.path.exists(dataset_path):
        dataset_path = os.path.join('data', 'raw', 'football_matches_2024_2025.csv')
    
    # –ï—â–µ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    if not os.path.exists(dataset_path):
        dataset_path = os.path.join('data', 'football_matches.csv')
    
    if not os.path.exists(dataset_path):
        print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüì• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
        print("   python ml/download_data.py")
        print("\n   –ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle:")
        print("   https://www.kaggle.com/datasets/tarekmasryo/football-matches-20242025-top-5-leagues")
        sys.exit(1)
    
    print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞—Ç–∞—Å–µ—Ç: {dataset_path}\n")
    train_model_from_kaggle(dataset_path)
