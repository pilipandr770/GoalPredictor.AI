"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
"""
import os
import sys
import pandas as pd
import numpy as np

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from train_ensemble import EnsembleGoalPredictor
from model import GoalPredictorModel


def compare_all_models():
    """–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    print("="*80)
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô GOALPREDICTOR.AI")
    print("="*80)
    
    results = []
    
    # 1. –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å (LightGBM –æ–¥–Ω–∞)
    print("\n" + "="*80)
    print("üìä –ú–û–î–ï–õ–¨ #1: –ë–∞–∑–æ–≤–∞—è LightGBM (–ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è)")
    print("="*80)
    print("   –î–∞–Ω–Ω—ã–µ: 975 –æ–±—Ä–∞–∑—Ü–æ–≤, 29 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   –î–∞—Ç–∞—Å–µ—Ç: Kaggle 2024-2025 (—Ç–æ–ø-5 –ª–∏–≥)")
    print("   –ê–ª–≥–æ—Ä–∏—Ç–º: LightGBM")
    print("   –†–µ–∑—É–ª—å—Ç–∞—Ç: Train 99.49%, Test 52.31%, AUC 52.56%")
    
    results.append({
        '–ú–æ–¥–µ–ª—å': '–ë–∞–∑–æ–≤–∞—è LightGBM',
        '–û–±—Ä–∞–∑—Ü—ã': 975,
        '–ü—Ä–∏–∑–Ω–∞–∫–∏': 29,
        '–ê–ª–≥–æ—Ä–∏—Ç–º': 'LightGBM',
        'Test Accuracy': 0.5231,
        'AUC': 0.5256
    })
    
    # 2. –ù–æ–≤—ã–π –∞–Ω—Å–∞–º–±–ª—å
    print("\n" + "="*80)
    print("üìä –ú–û–î–ï–õ–¨ #2: –ê–Ω—Å–∞–º–±–ª—å –∏–∑ 4 –º–æ–¥–µ–ª–µ–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è)")
    print("="*80)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω—Å–∞–º–±–ª—å
        ensemble_files = [f for f in os.listdir('ml/models') if f.startswith('ensemble_')]
        if ensemble_files:
            latest_ensemble = sorted(ensemble_files)[-1]
            print(f"   –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω—Å–∞–º–±–ª—å: {latest_ensemble}")
            
            ensemble = EnsembleGoalPredictor()
            ensemble.load_ensemble(os.path.join('ml/models', latest_ensemble))
            
            print("\n   –°–æ—Å—Ç–∞–≤ –∞–Ω—Å–∞–º–±–ª—è:")
            for model_name, weight in ensemble.model_weights.items():
                print(f"      - {model_name}: {weight:.2%}")
            
            print("\n   –î–∞–Ω–Ω—ã–µ: 2140 –æ–±—Ä–∞–∑—Ü–æ–≤, 58 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            print("   –î–∞—Ç–∞—Å–µ—Ç: Premier League 2002-2022 —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
            print("   –ü—Ä–∏–∑–Ω–∞–∫–∏: rolling averages, head-to-head, —É–¥–∞—Ä—ã, –∫–æ—Ä–Ω–µ—Ä—ã, –∫–∞—Ä—Ç–æ—á–∫–∏")
            print("   –†–µ–∑—É–ª—å—Ç–∞—Ç: Test Accuracy 68.69%, AUC 81.14%")
            
            results.append({
                '–ú–æ–¥–µ–ª—å': '–ê–Ω—Å–∞–º–±–ª—å (4 –º–æ–¥–µ–ª–∏)',
                '–û–±—Ä–∞–∑—Ü—ã': 2140,
                '–ü—Ä–∏–∑–Ω–∞–∫–∏': 58,
                '–ê–ª–≥–æ—Ä–∏—Ç–º': 'LightGBM+XGBoost+CatBoost+RF',
                'Test Accuracy': 0.6869,
                'AUC': 0.8114
            })
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            print("\n   üìà –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª–µ:")
            individual_results = [
                ('LightGBM', 0.6939, 0.8006),
                ('XGBoost', 0.6963, 0.8060),
                ('CatBoost', 0.7009, 0.8147),
                ('Random Forest', 0.7150, 0.8030),
            ]
            
            for model_name, acc, auc in individual_results:
                print(f"      {model_name:20} Accuracy: {acc:.2%}  AUC: {auc:.2%}")
                results.append({
                    '–ú–æ–¥–µ–ª—å': f'  ‚îî‚îÄ {model_name}',
                    '–û–±—Ä–∞–∑—Ü—ã': 2140,
                    '–ü—Ä–∏–∑–Ω–∞–∫–∏': 58,
                    '–ê–ª–≥–æ—Ä–∏—Ç–º': model_name,
                    'Test Accuracy': acc,
                    'AUC': auc
                })
        else:
            print("   ‚ùå –ê–Ω—Å–∞–º–±–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω—Å–∞–º–±–ª—è: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("="*80)
    
    df_results = pd.DataFrame(results)
    
    print(f"\n{'–ú–æ–¥–µ–ª—å':<30} {'–û–±—Ä–∞–∑—Ü—ã':>10} {'–ü—Ä–∏–∑–Ω–∞–∫–∏':>10} {'Accuracy':>12} {'AUC':>12}")
    print("-" * 80)
    
    for _, row in df_results.iterrows():
        print(f"{row['–ú–æ–¥–µ–ª—å']:<30} {row['–û–±—Ä–∞–∑—Ü—ã']:>10} {row['–ü—Ä–∏–∑–Ω–∞–∫–∏']:>10} "
              f"{row['Test Accuracy']:>11.2%} {row['AUC']:>11.2%}")
    
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
    print("\nüéØ –ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–ô:")
    print("-" * 80)
    
    base_acc = results[0]['Test Accuracy']
    ensemble_acc = results[1]['Test Accuracy']
    improvement = (ensemble_acc - base_acc) / base_acc * 100
    
    print(f"   –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å:          {base_acc:.2%}")
    print(f"   –ê–Ω—Å–∞–º–±–ª—å:                {ensemble_acc:.2%}")
    print(f"   –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏:      +{improvement:.1f}%")
    print(f"   –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:    +{ensemble_acc - base_acc:.2%}")
    
    base_auc = results[0]['AUC']
    ensemble_auc = results[1]['AUC']
    auc_improvement = (ensemble_auc - base_auc) / base_auc * 100
    
    print(f"\n   –ë–∞–∑–æ–≤–∞—è AUC:             {base_auc:.2%}")
    print(f"   –ê–Ω—Å–∞–º–±–ª—å AUC:            {ensemble_auc:.2%}")
    print(f"   –£–ª—É—á—à–µ–Ω–∏–µ AUC:           +{auc_improvement:.1f}%")
    print(f"   –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:    +{ensemble_auc - base_auc:.2%}")
    
    print("\n‚ú® –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê:")
    print("-" * 80)
    print("   ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: 975 ‚Üí 2140 –æ–±—Ä–∞–∑—Ü–æ–≤ (+119%)")
    print("   ‚úÖ –ë–æ–ª—å—à–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 29 ‚Üí 58 (+100%)")
    print("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É–¥–∞—Ä—ã, –∫–æ—Ä–Ω–µ—Ä—ã, –∫–∞—Ä—Ç–æ—á–∫–∏, —Ñ–æ—Ä–º–∞")
    print("   ‚úÖ Rolling averages: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3, 5, 10 –º–∞—Ç—á–µ–π")
    print("   ‚úÖ Head-to-head —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –º–µ—Å—è—Ü")
    print("   ‚úÖ –ê–Ω—Å–∞–º–±–ª—å –∏–∑ 4 –º–æ–¥–µ–ª–µ–π: LightGBM, XGBoost, CatBoost, Random Forest")
    print("   ‚úÖ Weighted voting: –∫–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –≤–Ω–æ—Å–∏—Ç –≤–∫–ª–∞–¥ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
    print("-" * 80)
    print("   –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∫ –ø—Ä–æ–≥–Ω–æ–∑—É:")
    print("   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å > 75%:  –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (strong bet)")
    print("   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 60-75%: –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (moderate bet)")
    print("   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 50-60%: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (risky bet)")
    print("   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å < 50%:  –°—Ç–∞–≤–∫–∞ –ø—Ä–æ—Ç–∏–≤ Over 2.5")
    
    print("\n" + "="*80)
    print("‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*80)


if __name__ == '__main__':
    compare_all_models()
