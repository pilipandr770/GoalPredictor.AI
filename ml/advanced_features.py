"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (feature engineering) –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: —É–¥–∞—Ä—ã, –∫–æ—Ä–Ω–µ—Ä—ã, –∫–∞—Ä—Ç–æ—á–∫–∏, —Ñ–æ—Ä–º—É –∫–æ–º–∞–Ω–¥
"""
import pandas as pd
import numpy as np
from datetime import datetime


class AdvancedFeatureEngineering:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        self.features_count = 0
    
    def load_enhanced_dataset(self, filepath):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç Premier League"""
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {filepath}")
        
        df = pd.read_csv(filepath, low_memory=False)
        
        # –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        essential_cols = [
            'Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR',
            'HTHG', 'HTAG', 'HTR',  # –ì–æ–ª—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–π–º–∞
            'HS', 'AS',              # –£–¥–∞—Ä—ã
            'HST', 'AST',            # –£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä
            'HF', 'AF',              # –§–æ–ª—ã
            'HC', 'AC',              # –ö–æ—Ä–Ω–µ—Ä—ã
            'HY', 'AY',              # –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            'HR', 'AR',              # –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            'HTGS', 'ATGS',          # Goals Scored
            'HTGC', 'ATGC',          # Goals Conceded
            'HTP', 'ATP',            # Points
            'HTFormPts', 'ATFormPts', # Form Points
            'HTGD', 'ATGD',          # Goal Difference
            'HTWinStreak3', 'ATWinStreak3',
            'HTWinStreak5', 'ATWinStreak5',
            'HTLossStreak3', 'ATLossStreak3',
        ]
        
        # –í–∑—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        available_cols = [col for col in essential_cols if col in df.columns]
        df = df[available_cols].copy()
        
        # –£–±—Ä–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(subset=['Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG'])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
        df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y', errors='coerce')
        df = df.dropna(subset=['Date'])
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        df['FTHG'] = pd.to_numeric(df['FTHG'], errors='coerce')
        df['FTAG'] = pd.to_numeric(df['FTAG'], errors='coerce')
        df['TotalGoals'] = df['FTHG'] + df['FTAG']
        df['Over2_5'] = (df['TotalGoals'] > 2.5).astype(int)
        df['BTTS'] = ((df['FTHG'] > 0) & (df['FTAG'] > 0)).astype(int)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        df = df.sort_values('Date').reset_index(drop=True)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –º–∞—Ç—á–µ–π")
        print(f"   –ü–µ—Ä–∏–æ–¥: {df['Date'].min()} - {df['Date'].max()}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        print(f"   Over 2.5: {df['Over2_5'].mean():.1%}")
        
        return df
    
    def calculate_rolling_stats(self, df, team, home=True, windows=[3, 5, 10]):
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            df: DataFrame —Å –º–∞—Ç—á–∞–º–∏
            team: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            home: True –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –º–∞—Ç—á–µ–π, False –¥–ª—è –≤—ã–µ–∑–¥–Ω—ã—Ö
            windows: –û–∫–Ω–∞ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        """
        # –§–∏–ª—å—Ç—Ä –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
        if home:
            team_matches = df[df['HomeTeam'] == team].copy()
            prefix = 'H'
        else:
            team_matches = df[df['AwayTeam'] == team].copy()
            prefix = 'A'
        
        stats = {}
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π, –≤–µ—Ä–Ω—É—Ç—å –Ω—É–ª–∏
        if len(team_matches) == 0:
            for window in windows:
                stats[f'goals_scored_last_{window}'] = 0
                stats[f'goals_conceded_last_{window}'] = 0
                stats[f'shots_last_{window}'] = 0
                stats[f'shots_on_target_last_{window}'] = 0
                stats[f'corners_last_{window}'] = 0
                stats[f'fouls_last_{window}'] = 0
                stats[f'yellow_cards_last_{window}'] = 0
            return stats
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        for window in windows:
            # –ì–æ–ª—ã –∑–∞–±–∏—Ç—ã–µ
            if f'FT{prefix}G' in team_matches.columns and len(team_matches) > 0:
                goals_scored = team_matches[f'FT{prefix}G'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'goals_scored_last_{window}'] = goals_scored
            else:
                stats[f'goals_scored_last_{window}'] = 0
            
            # –ì–æ–ª—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
            opp_prefix = 'A' if prefix == 'H' else 'H'
            if f'FT{opp_prefix}G' in team_matches.columns and len(team_matches) > 0:
                goals_conceded = team_matches[f'FT{opp_prefix}G'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'goals_conceded_last_{window}'] = goals_conceded
            else:
                stats[f'goals_conceded_last_{window}'] = 0
            
            # –£–¥–∞—Ä—ã
            if f'{prefix}S' in team_matches.columns and len(team_matches) > 0:
                shots = team_matches[f'{prefix}S'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'shots_last_{window}'] = shots
            else:
                stats[f'shots_last_{window}'] = 0
            
            # –£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä
            if f'{prefix}ST' in team_matches.columns and len(team_matches) > 0:
                shots_on_target = team_matches[f'{prefix}ST'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'shots_on_target_last_{window}'] = shots_on_target
            else:
                stats[f'shots_on_target_last_{window}'] = 0
            
            # –ö–æ—Ä–Ω–µ—Ä—ã
            if f'{prefix}C' in team_matches.columns and len(team_matches) > 0:
                corners = team_matches[f'{prefix}C'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'corners_last_{window}'] = corners
            else:
                stats[f'corners_last_{window}'] = 0
            
            # –§–æ–ª—ã
            if f'{prefix}F' in team_matches.columns and len(team_matches) > 0:
                fouls = team_matches[f'{prefix}F'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'fouls_last_{window}'] = fouls
            else:
                stats[f'fouls_last_{window}'] = 0
            
            # –ö–∞—Ä—Ç–æ—á–∫–∏
            if f'{prefix}Y' in team_matches.columns and len(team_matches) > 0:
                yellows = team_matches[f'{prefix}Y'].rolling(window=window, min_periods=1).mean().iloc[-1]
                stats[f'yellow_cards_last_{window}'] = yellows
            else:
                stats[f'yellow_cards_last_{window}'] = 0
        
        return stats
    
    def calculate_head_to_head(self, df, home_team, away_team, last_n=5):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"""
        h2h_home = df[(df['HomeTeam'] == home_team) & (df['AwayTeam'] == away_team)]
        h2h_away = df[(df['HomeTeam'] == away_team) & (df['AwayTeam'] == home_team)]
        h2h = pd.concat([h2h_home, h2h_away]).sort_values('Date').tail(last_n)
        
        if len(h2h) == 0:
            return {
                'h2h_matches': 0,
                'h2h_avg_goals': 0,
                'h2h_over_2_5_pct': 0,
            }
        
        stats = {
            'h2h_matches': len(h2h),
            'h2h_avg_goals': h2h['TotalGoals'].mean(),
            'h2h_over_2_5_pct': (h2h['TotalGoals'] > 2.5).mean(),
        }
        
        return stats
    
    def create_advanced_features(self, df, match_idx):
        """
        –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        
        Args:
            df: DataFrame —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç—á–∞–º–∏
            match_idx: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        """
        match = df.iloc[match_idx]
        history = df.iloc[:match_idx]  # –ò—Å—Ç–æ—Ä–∏—è –¥–æ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        
        if len(history) < 20:  # –ú–∏–Ω–∏–º—É–º 20 –º–∞—Ç—á–µ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            return None
        
        features = {}
        
        home_team = match['HomeTeam']
        away_team = match['AwayTeam']
        
        # === 1. –ë–ê–ó–û–í–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
        
        # –ì–æ–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ (3, 5, 10)
        home_rolling = self.calculate_rolling_stats(history, home_team, home=True)
        away_rolling = self.calculate_rolling_stats(history, away_team, home=False)
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        for key, value in home_rolling.items():
            features[f'home_{key}'] = value
        for key, value in away_rolling.items():
            features[f'away_{key}'] = value
        
        # === 2. HEAD-TO-HEAD ===
        h2h_stats = self.calculate_head_to_head(history, home_team, away_team)
        features.update(h2h_stats)
        
        # === 3. –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
        match_date = match['Date']
        features['day_of_week'] = match_date.dayofweek  # 0=Monday, 6=Sunday
        features['is_weekend'] = 1 if match_date.dayofweek >= 5 else 0
        features['month'] = match_date.month
        features['is_holiday_season'] = 1 if match_date.month in [12, 1] else 0
        
        # === 4. –§–û–†–ú–ê –ö–û–ú–ê–ù–î (–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å) ===
        if 'HTFormPts' in match and pd.notna(match['HTFormPts']):
            features['home_form_points'] = match['HTFormPts']
        if 'ATFormPts' in match and pd.notna(match['ATFormPts']):
            features['away_form_points'] = match['ATFormPts']
        
        # –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥
        if 'HTWinStreak3' in match and pd.notna(match['HTWinStreak3']):
            features['home_win_streak_3'] = match['HTWinStreak3']
        if 'ATWinStreak3' in match and pd.notna(match['ATWinStreak3']):
            features['away_win_streak_3'] = match['ATWinStreak3']
        
        # === 5. –†–ê–°–ß–ï–¢–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
        
        # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤
        if 'home_goals_scored_last_5' in features and 'away_goals_conceded_last_5' in features:
            features['expected_home_goals'] = (
                features['home_goals_scored_last_5'] + features['away_goals_conceded_last_5']
            ) / 2
        
        if 'away_goals_scored_last_5' in features and 'home_goals_conceded_last_5' in features:
            features['expected_away_goals'] = (
                features['away_goals_scored_last_5'] + features['home_goals_conceded_last_5']
            ) / 2
        
        if 'expected_home_goals' in features and 'expected_away_goals' in features:
            features['expected_total_goals'] = features['expected_home_goals'] + features['expected_away_goals']
        
        # –ê—Ç–∞–∫—É—é—â–∞—è —Å–∏–ª–∞
        if 'home_shots_on_target_last_5' in features and 'away_shots_on_target_last_5' in features:
            features['attacking_strength'] = features['home_shots_on_target_last_5'] + features['away_shots_on_target_last_5']
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å (—Ñ–æ–ª—ã + –∫–∞—Ä—Ç–æ—á–∫–∏)
        if 'home_fouls_last_5' in features and 'away_fouls_last_5' in features:
            features['total_aggression'] = features['home_fouls_last_5'] + features['away_fouls_last_5']
        
        # === 6. –¶–ï–õ–ï–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
        features['over_2_5'] = match['Over2_5']
        features['btts'] = match['BTTS']
        
        return features
    
    def prepare_training_dataset(self, df, min_history=20):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        
        all_features = []
        
        for idx in range(len(df)):
            if idx % 1000 == 0 and idx > 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(df)} –º–∞—Ç—á–µ–π...")
            
            features = self.create_advanced_features(df, idx)
            if features is not None:
                all_features.append(features)
        
        features_df = pd.DataFrame(all_features)
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN –Ω—É–ª—è–º–∏
        features_df = features_df.fillna(0)
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features_df.columns) - 2}")  # -2 –¥–ª—è over_2_5 –∏ btts
        print(f"   –û–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(features_df)}")
        print(f"   Over 2.5: {features_df['over_2_5'].mean():.1%}")
        
        self.features_count = len(features_df.columns) - 2
        
        return features_df


def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í")
    print("="*70)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç
    fe = AdvancedFeatureEngineering()
    df = fe.load_enhanced_dataset('data/raw/premier_league_detailed.csv')
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"\nüìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –º–∞—Ç—á–µ–π")
    
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
    features_df = fe.prepare_training_dataset(df)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    output_path = 'data/processed/enhanced_features.csv'
    features_df.to_csv(output_path, index=False)
    print(f"\nüíæ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    print(features_df.head(3))
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    print(features_df.describe())


if __name__ == '__main__':
    main()
