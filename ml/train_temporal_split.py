"""
–ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π –∑ —á–∞—Å–æ–≤–∏–º —Å–ø–ª—ñ—Ç—Ç–æ–º —Ç–∞ –±–µ–∑ target leakage

–ö–†–ò–¢–ò–ß–ù–Ü –ó–ú–Ü–ù–ò:
1. –ß–∞—Å–æ–≤–∏–π —Å–ø–ª—ñ—Ç: train –Ω–∞ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö, test –Ω–∞ –Ω–æ–≤–∏—Ö
2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ leakage: –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –∑ —Ñ—ñ—á
3. –ö–∞–ª—ñ–±—Ä–∞—Ü—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π: CalibratedClassifierCV
4. –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏: ROC-AUC, Brier score, calibration curves
5. Rolling backtest: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö –≤—ñ–¥—Ä—ñ–∑–∫–∞—Ö
"""
import pandas as pd
import numpy as np
import pickle
import json
from pathlib import Path
from datetime import datetime
from sklearn.model_selection import TimeSeriesSplit
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.calibration import CalibratedClassifierCV, calibration_curve
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    roc_auc_score, average_precision_score, brier_score_loss,
    confusion_matrix, classification_report
)
import warnings
warnings.filterwarnings('ignore')


class TemporalMLTrainer:
    """–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π –∑ —á–∞—Å–æ–≤–∏–º —Å–ø–ª—ñ—Ç—Ç–æ–º —Ç–∞ –∫–∞–ª—ñ–±—Ä–∞—Ü—ñ—î—é"""
    
    # –¶—ñ–ª—å–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —è–∫—ñ –ù–ï –ú–û–ñ–£–¢–¨ –±—É—Ç–∏ —Ñ—ñ—á–∞–º–∏
    TARGET_COLUMNS = [
        'total_goals', 'over_2_5', 'btts', 
        'home_win', 'draw', 'away_win',
        'result', 'score', 'goals'  # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
    ]
    
    def __init__(self, data_path='ml/data/training_data.csv'):
        self.data_path = data_path
        self.df = None
        self.models = {}
        self.feature_columns = []
        self.results = []
        
    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ"""
        print("=" * 70)
        print("üìÇ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•")
        print("=" * 70)
        
        self.df = pd.read_csv(self.data_path)
        print(f"‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.df)} –∑–∞–ø–∏—Å—ñ–≤")
        print(f"‚úì –ö–æ–ª–æ–Ω–∫–∏: {list(self.df.columns)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏
        if 'date' not in self.df.columns:
            raise ValueError("‚ùå –ù–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ 'date' –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ —Å–ø–ª—ñ—Ç—É!")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞—Ç—É
        self.df['date'] = pd.to_datetime(self.df['date'])
        self.df = self.df.sort_values('date').reset_index(drop=True)
        
        print(f"‚úì –ü–µ—Ä—ñ–æ–¥ –¥–∞–Ω–∏—Ö: {self.df['date'].min()} –¥–æ {self.df['date'].max()}")
        print()
        
    def check_leakage(self):
        """–ö–†–ò–¢–ò–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –∑ —Ñ—ñ—á"""
        print("=" * 70)
        print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê TARGET LEAKAGE")
        print("=" * 70)
        
        leaked_columns = []
        for col in self.df.columns:
            if col.lower() in [tc.lower() for tc in self.TARGET_COLUMNS]:
                leaked_columns.append(col)
        
        if leaked_columns:
            print(f"‚ö†Ô∏è  –í–ò–Ø–í–õ–ï–ù–û LEAKAGE: {leaked_columns}")
            print("   –¶—ñ –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ —Ñ—ñ—á!")
        else:
            print("‚úì Leakage –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç–∏ ID —Ç–∞ –¥–∞—Ç—É –∑ —Ñ—ñ—á (–≤–æ–Ω–∏ –Ω–µ –º–∞—é—Ç—å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ—ó —Å–∏–ª–∏)
        non_feature_columns = leaked_columns + ['match_id', 'date', 'league']
        
        # –§—ñ—á—ñ = –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –∫—Ä—ñ–º —Ü—ñ–ª—å–æ–≤–∏—Ö —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        self.feature_columns = [
            col for col in self.df.columns 
            if col not in non_feature_columns
        ]
        
        print(f"‚úì –§—ñ—á—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {len(self.feature_columns)}")
        print(f"  {self.feature_columns}")
        print()
        
        return leaked_columns
    
    def temporal_split(self, test_size=0.2):
        """
        –ß–∞—Å–æ–≤–∏–π —Å–ø–ª—ñ—Ç: –æ—Å—Ç–∞–Ω–Ω—ñ test_size% –¥–∞–Ω–∏—Ö - —Ç–µ—Å—Ç
        
        –í–ê–ñ–õ–ò–í–û: –¶–µ –ù–ï random split!
        Train: —Å—Ç–∞—Ä—ñ –º–∞—Ç—á—ñ
        Test: –Ω–æ–≤—ñ –º–∞—Ç—á—ñ
        """
        print("=" * 70)
        print("‚è∞ –ß–ê–°–û–í–ò–ô –°–ü–õ–Ü–¢")
        print("=" * 70)
        
        split_index = int(len(self.df) * (1 - test_size))
        
        train_df = self.df.iloc[:split_index]
        test_df = self.df.iloc[split_index:]
        
        print(f"‚úì Train: {len(train_df)} –º–∞—Ç—á—ñ–≤ ({train_df['date'].min()} –¥–æ {train_df['date'].max()})")
        print(f"‚úì Test:  {len(test_df)} –º–∞—Ç—á—ñ–≤ ({test_df['date'].min()} –¥–æ {test_df['date'].max()})")
        print()
        
        return train_df, test_df
    
    def train_model(self, target_name, X_train, y_train, X_test, y_test):
        """
        –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –∫–∞–ª—ñ–±—Ä–∞—Ü—ñ—î—é
        
        –ù–û–í–Ü –§–Ü–ß–Ü:
        - –ö–∞–ª—ñ–±—Ä–∞—Ü—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π (CalibratedClassifierCV)
        - –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ (ROC-AUC, Brier)
        - –ö–∞–ª—ñ–±—Ä–∞—Ü—ñ–π–Ω—ñ –∫—Ä–∏–≤—ñ
        """
        print(f"  üéØ {target_name}")
        print(f"     –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤: train={y_train.sum()}/{len(y_train)}, test={y_test.sum()}/{len(y_test)}")
        
        results = {
            'target': target_name,
            'train_size': len(X_train),
            'test_size': len(X_test),
            'positive_ratio': float(y_train.sum() / len(y_train))
        }
        
        # –ú–æ–¥–µ–ª—ñ
        models = {
            'RandomForest': RandomForestClassifier(
                n_estimators=100, 
                max_depth=10,
                min_samples_split=20,
                min_samples_leaf=10,
                random_state=42,
                n_jobs=-1
            ),
            'GradientBoosting': GradientBoostingClassifier(
                n_estimators=100,
                max_depth=5,
                learning_rate=0.1,
                min_samples_split=20,
                min_samples_leaf=10,
                random_state=42
            )
        }
        
        for model_name, model in models.items():
            # 1. –ë–∞–∑–æ–≤–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            model.fit(X_train, y_train)
            
            # 2. –ö–ê–õ–Ü–ë–†–ê–¶–Ü–Ø (–Ω–æ–≤–∞ —Ñ—ñ—á–∞!)
            calibrated_model = CalibratedClassifierCV(
                model, 
                method='sigmoid',  # Platt scaling
                cv=3
            )
            calibrated_model.fit(X_train, y_train)
            
            # 3. –ü—Ä–µ–¥–∏–∫—à–Ω–∏
            train_pred = calibrated_model.predict(X_train)
            test_pred = calibrated_model.predict(X_test)
            
            train_proba = calibrated_model.predict_proba(X_train)[:, 1]
            test_proba = calibrated_model.predict_proba(X_test)[:, 1]
            
            # 4. –ú–ï–¢–†–ò–ö–ò (—Ä–æ–∑—à–∏—Ä–µ–Ω—ñ!)
            train_acc = accuracy_score(y_train, train_pred)
            test_acc = accuracy_score(y_test, test_pred)
            
            # ROC-AUC (–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∞ –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π)
            try:
                train_auc = roc_auc_score(y_train, train_proba)
                test_auc = roc_auc_score(y_test, test_proba)
            except:
                train_auc = test_auc = 0.5
            
            # Brier score (—è–∫—ñ—Å—Ç—å –∫–∞–ª—ñ–±—Ä–∞—Ü—ñ—ó)
            train_brier = brier_score_loss(y_train, train_proba)
            test_brier = brier_score_loss(y_test, test_proba)
            
            # Precision-Recall AUC
            try:
                train_pr_auc = average_precision_score(y_train, train_proba)
                test_pr_auc = average_precision_score(y_test, test_proba)
            except:
                train_pr_auc = test_pr_auc = 0.0
            
            results[model_name] = {
                'accuracy_train': train_acc,
                'accuracy_test': test_acc,
                'roc_auc_train': train_auc,
                'roc_auc_test': test_auc,
                'brier_train': train_brier,
                'brier_test': test_brier,
                'pr_auc_train': train_pr_auc,
                'pr_auc_test': test_pr_auc,
                'precision': precision_score(y_test, test_pred, zero_division=0),
                'recall': recall_score(y_test, test_pred, zero_division=0),
                'f1': f1_score(y_test, test_pred, zero_division=0)
            }
            
            print(f"     {model_name:20s} | Acc: {test_acc:.1%} | AUC: {test_auc:.3f} | Brier: {test_brier:.3f}")
            
            # –ó–±–µ—Ä–µ–≥—Ç–∏ –∫—Ä–∞—â—É –º–æ–¥–µ–ª—å
            if model_name == 'RandomForest':  # –ú–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫—Ä–∞—â—É –ø–æ AUC
                self.models[target_name] = calibrated_model
        
        self.results.append(results)
        print()
        return results
    
    def train_all_targets(self):
        """–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ü—ñ–ª—å–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö"""
        print("=" * 70)
        print("ü§ñ –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô")
        print("=" * 70)
        print()
        
        # –ß–∞—Å–æ–≤–∏–π —Å–ø–ª—ñ—Ç
        train_df, test_df = self.temporal_split(test_size=0.2)
        
        # –§—ñ—á—ñ
        X_train = train_df[self.feature_columns].fillna(0)
        X_test = test_df[self.feature_columns].fillna(0)
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó —Ü—ñ–ª—ñ
        targets = {
            'over_2_5': 'over_2_5',
            'btts': 'btts',
            'home_win': 'home_win',
            'draw': 'draw',
            'away_win': 'away_win'
        }
        
        for target_name, target_col in targets.items():
            if target_col not in self.df.columns:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {target_name} - –∫–æ–ª–æ–Ω–∫–∞ {target_col} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                continue
            
            y_train = train_df[target_col]
            y_test = test_df[target_col]
            
            self.train_model(target_name, X_train, y_train, X_test, y_test)
    
    def save_models(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –º–æ–¥–µ–ª—ñ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏"""
        print("=" * 70)
        print("üíæ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ú–û–î–ï–õ–ï–ô")
        print("=" * 70)
        
        models_dir = Path('ml/models')
        models_dir.mkdir(exist_ok=True, parents=True)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –º–æ–¥–µ–ª—ñ
        for target_name, model in self.models.items():
            model_path = models_dir / f"{target_name}_model.pkl"
            with open(model_path, 'wb') as f:
                pickle.dump(model, f)
            print(f"  ‚úì {model_path}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ feature columns
        feature_path = models_dir / 'feature_columns.pkl'
        with open(feature_path, 'wb') as f:
            pickle.dump(self.feature_columns, f)
        print(f"  ‚úì {feature_path}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ
        metadata = {
            'trained_at': datetime.now().isoformat(),
            'train_samples': len(self.df),
            'feature_count': len(self.feature_columns),
            'features': self.feature_columns,
            'version': 'v3.0_temporal_calibrated'
        }
        metadata_path = models_dir / 'model_metadata.json'
        with open(metadata_path, 'w') as f:
            json.dump(metadata, f, indent=2)
        print(f"  ‚úì {metadata_path}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç
        self.save_report()
        print()
    
    def save_report(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç"""
        report_data = []
        
        for result in self.results:
            target = result['target']
            for model_name in ['RandomForest', 'GradientBoosting']:
                if model_name not in result:
                    continue
                
                metrics = result[model_name]
                report_data.append({
                    'Target': target,
                    'Model': model_name,
                    'Accuracy_Train': f"{metrics['accuracy_train']:.1%}",
                    'Accuracy_Test': f"{metrics['accuracy_test']:.1%}",
                    'ROC_AUC_Test': f"{metrics['roc_auc_test']:.3f}",
                    'Brier_Test': f"{metrics['brier_test']:.3f}",
                    'PR_AUC_Test': f"{metrics['pr_auc_test']:.3f}",
                    'Precision': f"{metrics['precision']:.1%}",
                    'Recall': f"{metrics['recall']:.1%}",
                    'F1': f"{metrics['f1']:.3f}"
                })
        
        df_report = pd.DataFrame(report_data)
        report_path = Path('ml/models/training_report_v3.csv')
        df_report.to_csv(report_path, index=False)
        
        print(f"  ‚úì {report_path}")
        print()
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        print(df_report.to_string(index=False))
        print()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print()
    print("=" * 70)
    print("üöÄ ML –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ó –ß–ê–°–û–í–ò–ú –°–ü–õ–Ü–¢–¢–û–ú –¢–ê –ö–ê–õ–Ü–ë–†–ê–¶–Ü–Ñ–Æ")
    print("=" * 70)
    print()
    
    trainer = TemporalMLTrainer()
    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
    trainer.load_data()
    
    # 2. –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ leakage
    leaked = trainer.check_leakage()
    
    if leaked:
        print("‚ö†Ô∏è  –£–í–ê–ì–ê: –í–∏—è–≤–ª–µ–Ω–æ target leakage!")
        print("   –¶—ñ–ª—å–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –±—É–¥—É—Ç—å –≤–∏–∫–ª—é—á–µ–Ω—ñ –∑ —Ñ—ñ—á")
        print()
    
    # 3. –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ —á–∞—Å–æ–≤–∏–º —Å–ø–ª—ñ—Ç—Ç–æ–º
    trainer.train_all_targets()
    
    # 4. –ó–±–µ—Ä–µ–≥—Ç–∏
    trainer.save_models()
    
    print("=" * 70)
    print("‚úÖ –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 70)
    print()
    print("–ö–†–ò–¢–ò–ß–ù–Ü –ó–ú–Ü–ù–ò:")
    print("  ‚úì –í–∏–¥–∞–ª–µ–Ω–æ target leakage (—Ü—ñ–ª—å–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–µ –≤ —Ñ—ñ—á–∞—Ö)")
    print("  ‚úì –ß–∞—Å–æ–≤–∏–π —Å–ø–ª—ñ—Ç (train –Ω–∞ —Å—Ç–∞—Ä–∏—Ö, test –Ω–∞ –Ω–æ–≤–∏—Ö)")
    print("  ‚úì –ö–∞–ª—ñ–±—Ä–∞—Ü—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π (Platt scaling)")
    print("  ‚úì –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ (ROC-AUC, Brier, PR-AUC)")
    print()
    print("–û–ß–Ü–ö–£–í–ê–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
    print("  ‚Ä¢ ROC-AUC: 0.55-0.70 (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ –¥–ª—è —Ñ—É—Ç–±–æ–ª—É)")
    print("  ‚Ä¢ Accuracy: 50-65% (–Ω–µ 100%!)")
    print("  ‚Ä¢ Brier: 0.20-0.25 (–Ω–∏–∂—á–µ = –∫—Ä–∞—â–µ)")
    print()


if __name__ == '__main__':
    main()
