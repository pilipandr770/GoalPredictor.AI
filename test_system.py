"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç GoalPredictor.AI
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
from datetime import datetime

print("\n" + "="*60)
print("üß™ –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í GoalPredictor.AI")
print("="*60 + "\n")

# –°—á–µ—Ç—á–∏–∫–∏
tests_passed = 0
tests_failed = 0
warnings = 0

def test_step(name, func):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–≥"""
    global tests_passed, tests_failed, warnings
    
    try:
        print(f"‚ñ∂Ô∏è  {name}...", end=" ")
        result = func()
        
        if result == "warning":
            print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
            warnings += 1
        else:
            print("‚úÖ OK")
            tests_passed += 1
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        tests_failed += 1
        return False


# === –¢–ï–°–¢ 1: –ò–º–ø–æ—Ä—Ç—ã ===
print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
print("-" * 60)

def test_flask():
    import flask
    return True

def test_sqlalchemy():
    import sqlalchemy
    return True

def test_lightgbm():
    try:
        import lightgbm
        return True
    except ImportError:
        return "warning"

def test_openai():
    try:
        import openai
        return True
    except ImportError:
        return "warning"

test_step("Flask", test_flask)
test_step("SQLAlchemy", test_sqlalchemy)
test_step("LightGBM", test_lightgbm)
test_step("OpenAI SDK", test_openai)


# === –¢–ï–°–¢ 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
print("-" * 60)

def test_config():
    from config import Config
    return True

def test_env_variables():
    from config import Config
    
    if not Config.FOOTBALL_DATA_ORG_KEY or Config.FOOTBALL_DATA_ORG_KEY == 'your-api-key-here':
        print("\n   ‚ö†Ô∏è  FOOTBALL_DATA_ORG_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return "warning"
    
    return True

def test_openai_key():
    from config import Config
    
    if not Config.OPENAI_API_KEY or Config.OPENAI_API_KEY.startswith('your-'):
        print("\n   ‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return "warning"
    
    return True

test_step("Config –∑–∞–≥—Ä—É–∑–∫–∞", test_config)
test_step("Football API –∫–ª—é—á", test_env_variables)
test_step("OpenAI API –∫–ª—é—á", test_openai_key)


# === –¢–ï–°–¢ 3: –°–µ—Ä–≤–∏—Å—ã ===
print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
print("-" * 60)

def test_football_api_service():
    from services.football_api import FootballAPIService
    api = FootballAPIService()
    return True

def test_football_data_org():
    from services.football_data_org import FootballDataOrgAPI
    api = FootballDataOrgAPI()
    return True

def test_openai_service():
    try:
        from services.openai_service import OpenAIService
        service = OpenAIService()
        return True
    except:
        return "warning"

test_step("FootballAPIService", test_football_api_service)
test_step("FootballDataOrgAPI", test_football_data_org)
test_step("OpenAIService", test_openai_service)


# === –¢–ï–°–¢ 4: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
print("-" * 60)

def test_db_models():
    from models import User, Match, Prediction
    return True

def test_db_connection():
    from app import create_app, db
    app = create_app()
    
    with app.app_context():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db.engine.connect()
    
    return True

test_step("–ú–æ–¥–µ–ª–∏ –ë–î", test_db_models)
test_step("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_db_connection)


# === –¢–ï–°–¢ 5: ML –º–æ–¥—É–ª—å ===
print("\nüß† –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥—É–ª—è...")
print("-" * 60)

def test_feature_engineering():
    from ml.model import GoalPredictorModel
    model = GoalPredictorModel()
    return True

def test_predictor():
    from ml.predict import PredictionService
    predictor = PredictionService()
    return True if predictor else "warning"

def test_ml_model_exists():
    import os
    
    lgb_exists = os.path.exists('models/goal_predictor_lgb.pkl')
    xgb_exists = os.path.exists('models/goal_predictor_xgb.pkl')
    
    if not lgb_exists and not xgb_exists:
        print("\n   ‚ö†Ô∏è  ML –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python ml/train.py")
        return "warning"
    
    return True

test_step("GoalPredictorModel", test_feature_engineering)
test_step("PredictionService", test_predictor)
test_step("ML –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞", test_ml_model_exists)


# === –¢–ï–°–¢ 6: API –º–∞—Ä—à—Ä—É—Ç—ã ===
print("\nüõ£Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤...")
print("-" * 60)

def test_app_creation():
    from app import create_app
    app = create_app()
    return True

def test_blueprints():
    from app import create_app
    app = create_app()
    
    blueprints = [bp.name for bp in app.blueprints.values()]
    
    required = ['auth', 'matches', 'subscriptions', 'users']
    missing = [bp for bp in required if bp not in blueprints]
    
    if missing:
        print(f"\n   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç blueprints: {missing}")
        return "warning"
    
    return True

test_step("–°–æ–∑–¥–∞–Ω–∏–µ Flask app", test_app_creation)
test_step("Blueprints —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", test_blueprints)


# === –¢–ï–°–¢ 7: –ñ–∏–≤–æ–π API —Ç–µ—Å—Ç ===
print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö API...")
print("-" * 60)

def test_football_api_live():
    from services.football_api import FootballAPIService
    
    api = FootballAPIService()
    fixtures = api.get_todays_fixtures()
    
    if fixtures is None:
        print("\n   ‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª None (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ –ª–∏–º–∏—Ç—ã)")
        return "warning"
    
    print(f"\n   üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(fixtures)}")
    
    return True

def test_openai_api_live():
    try:
        from services.openai_service import OpenAIService
        from config import Config
        
        if not Config.OPENAI_API_KEY or Config.OPENAI_API_KEY.startswith('your-'):
            return "warning"
        
        service = OpenAIService()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç (–Ω–µ —Ç—Ä–∞—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        return True
        
    except Exception as e:
        print(f"\n   ‚ö†Ô∏è  {e}")
        return "warning"

test_step("Football-Data.org API", test_football_api_live)
test_step("OpenAI API", test_openai_api_live)


# === –ò–¢–û–ì–ò ===
print("\n" + "="*60)
print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
print("="*60)

total_tests = tests_passed + tests_failed + warnings

print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:      {tests_passed}/{total_tests}")
print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:     {tests_failed}/{total_tests}")
print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}/{total_tests}")

if tests_failed == 0 and warnings == 0:
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    sys.exit(0)
elif tests_failed == 0:
    print(f"\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ API –∫–ª—é—á–∏ –∏ –æ–±—É—á–∏—Ç—å ML –º–æ–¥–µ–ª—å.")
    sys.exit(0)
else:
    print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò: {tests_failed}")
    print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    sys.exit(1)
