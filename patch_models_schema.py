"""
–ü–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è __table_args__ —Å–æ —Å—Ö–µ–º–æ–π –≤–æ –≤—Å–µ –º–æ–¥–µ–ª–∏
–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ schema-aware –º–æ–¥–µ–ª–∏
"""
import os
import re

SCHEMA_NAME = os.getenv('DATABASE_SCHEMA', 'goalpredictor')

models_file = 'models.py'

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open(models_file, 'r', encoding='utf-8') as f:
    content = f.read()

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –º–æ–¥–µ–ª–µ–π
pattern = r'(class \w+\([^)]+\):[\s\S]*?__tablename__ = [\'"](\w+)[\'"])'

def add_table_args(match):
    """–î–æ–±–∞–≤–∏—Ç—å __table_args__ –ø–æ—Å–ª–µ __tablename__"""
    full_match = match.group(0)
    tablename = match.group(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ __table_args__
    if '__table_args__' in full_match:
        return full_match
    
    # –î–æ–±–∞–≤–ª—è–µ–º __table_args__
    replacement = f"{full_match}\n    __table_args__ = {{'schema': '{SCHEMA_NAME}'}}"
    return replacement

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
new_content = re.sub(pattern, add_table_args, content)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
with open(f'{models_file}.backup', 'w', encoding='utf-8') as f:
    f.write(content)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
with open(models_file, 'w', encoding='utf-8') as f:
    f.write(new_content)

print(f"‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ {models_file}")
print(f"üì¶ Backup —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {models_file}.backup")
print(f"üìä –°—Ö–µ–º–∞: {SCHEMA_NAME}")
