"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —Å football-data.co.uk
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ CSV —Ñ–∞–π–ª—ã —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∞—Ç—á–∞—Ö
"""
import requests
import pandas as pd
import io
from datetime import datetime
from extensions import db
from app import create_app
from models import Team, Match

app = create_app()

# URL-—ã –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ (2020-2025)
DATASET_URLS = {
    'Premier League': {
        '2020-21': 'https://www.football-data.co.uk/mmz4281/2021/E0.csv',
        '2021-22': 'https://www.football-data.co.uk/mmz4281/2122/E0.csv',
        '2022-23': 'https://www.football-data.co.uk/mmz4281/2223/E0.csv',
        '2023-24': 'https://www.football-data.co.uk/mmz4281/2324/E0.csv',
        '2024-25': 'https://www.football-data.co.uk/mmz4281/2425/E0.csv',
    },
    'La Liga': {
        '2020-21': 'https://www.football-data.co.uk/mmz4281/2021/SP1.csv',
        '2021-22': 'https://www.football-data.co.uk/mmz4281/2122/SP1.csv',
        '2022-23': 'https://www.football-data.co.uk/mmz4281/2223/SP1.csv',
        '2023-24': 'https://www.football-data.co.uk/mmz4281/2324/SP1.csv',
        '2024-25': 'https://www.football-data.co.uk/mmz4281/2425/SP1.csv',
    },
    'Bundesliga': {
        '2020-21': 'https://www.football-data.co.uk/mmz4281/2021/D1.csv',
        '2021-22': 'https://www.football-data.co.uk/mmz4281/2122/D1.csv',
        '2022-23': 'https://www.football-data.co.uk/mmz4281/2223/D1.csv',
        '2023-24': 'https://www.football-data.co.uk/mmz4281/2324/D1.csv',
        '2024-25': 'https://www.football-data.co.uk/mmz4281/2425/D1.csv',
    },
    'Serie A': {
        '2020-21': 'https://www.football-data.co.uk/mmz4281/2021/I1.csv',
        '2021-22': 'https://www.football-data.co.uk/mmz4281/2122/I1.csv',
        '2022-23': 'https://www.football-data.co.uk/mmz4281/2223/I1.csv',
        '2023-24': 'https://www.football-data.co.uk/mmz4281/2324/I1.csv',
        '2024-25': 'https://www.football-data.co.uk/mmz4281/2425/I1.csv',
    },
    'Ligue 1': {
        '2020-21': 'https://www.football-data.co.uk/mmz4281/2021/F1.csv',
        '2021-22': 'https://www.football-data.co.uk/mmz4281/2122/F1.csv',
        '2022-23': 'https://www.football-data.co.uk/mmz4281/2223/F1.csv',
        '2023-24': 'https://www.football-data.co.uk/mmz4281/2324/F1.csv',
        '2024-25': 'https://www.football-data.co.uk/mmz4281/2425/F1.csv',
    }
}

LEAGUE_CODES = {
    'Premier League': 'PL',
    'La Liga': 'PD',
    'Bundesliga': 'BL1',
    'Serie A': 'SA',
    'Ligue 1': 'FL1'
}


def download_csv_dataset(url):
    """
    –°–∫–∞—á–∞—Ç—å CSV –¥–∞—Ç–∞—Å–µ—Ç
    """
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        # –ü—Ä–æ—á–∏—Ç–∞—Ç—å CSV
        df = pd.read_csv(io.StringIO(response.text))
        return df
    
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None


def parse_date(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    """
    formats = ['%d/%m/%Y', '%d/%m/%y', '%Y-%m-%d']
    
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt)
        except:
            continue
    
    return None


def process_csv_matches(df, league_code, season):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Ç—á–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
    """
    if df is None or df.empty:
        return 0
    
    matches_added = 0
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ football-data.co.uk CSV
    # Date, HomeTeam, AwayTeam, FTHG (Full Time Home Goals), FTAG, FTR (Full Time Result)
    
    for _, row in df.iterrows():
        try:
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if pd.isna(row.get('HomeTeam')) or pd.isna(row.get('AwayTeam')):
                continue
            
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if pd.isna(row.get('FTHG')) or pd.isna(row.get('FTAG')):
                continue
            
            home_team_name = str(row['HomeTeam']).strip()
            away_team_name = str(row['AwayTeam']).strip()
            
            # –°–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É
            home_team = Team.query.filter_by(
                name=home_team_name,
                league=league_code
            ).first()
            
            if not home_team:
                # –°–æ–∑–¥–∞—Ç—å —Å —Ñ–µ–π–∫–æ–≤—ã–º api_id (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è CSV –¥–∞–Ω–Ω—ã—Ö)
                home_team = Team(
                    api_id=-abs(hash(home_team_name + league_code)) % 1000000,
                    name=home_team_name,
                    league=league_code,
                    country='Unknown'
                )
                db.session.add(home_team)
            
            # –°–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            away_team = Team.query.filter_by(
                name=away_team_name,
                league=league_code
            ).first()
            
            if not away_team:
                away_team = Team(
                    api_id=-abs(hash(away_team_name + league_code)) % 1000000,
                    name=away_team_name,
                    league=league_code,
                    country='Unknown'
                )
                db.session.add(away_team)
            
            db.session.flush()
            
            # –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
            match_date = parse_date(str(row['Date']))
            if not match_date:
                continue
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            home_goals = int(row['FTHG'])
            away_goals = int(row['FTAG'])
            total_goals = home_goals + away_goals
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
            existing = Match.query.filter_by(
                home_team_id=home_team.id,
                away_team_id=away_team.id,
                match_date=match_date
            ).first()
            
            if not existing:
                new_match = Match(
                    api_id=-abs(hash(f"{home_team_name}{away_team_name}{match_date}")) % 1000000,
                    home_team_id=home_team.id,
                    away_team_id=away_team.id,
                    match_date=match_date,
                    league=league_code,
                    status='FINISHED',
                    home_goals=home_goals,
                    away_goals=away_goals,
                    total_goals=total_goals,
                    result='1' if home_goals > away_goals else ('X' if home_goals == away_goals else '2'),
                    over_2_5=total_goals > 2.5,
                    btts=(home_goals > 0 and away_goals > 0)
                )
                db.session.add(new_match)
                matches_added += 1
        
        except Exception as e:
            continue
    
    db.session.commit()
    return matches_added


def main():
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
    """
    with app.app_context():
        print("=" * 70)
        print("üìä –ó–ê–ì–†–£–ó–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –î–ê–¢–ê–°–ï–¢–û–í (football-data.co.uk)")
        print("=" * 70)
        print("\nüìù –ò—Å—Ç–æ—á–Ω–∏–∫: https://www.football-data.co.uk/")
        print("   –î–∞—Ç–∞—Å–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π —Å 2020 –≥–æ–¥–∞\n")
        
        total_matches = 0
        
        for league_name, seasons in DATASET_URLS.items():
            league_code = LEAGUE_CODES[league_name]
            print(f"\nüèÜ {league_name} ({league_code})")
            print("-" * 70)
            
            for season, url in seasons.items():
                print(f"   üì• –°–µ–∑–æ–Ω {season}...", end=' ')
                
                df = download_csv_dataset(url)
                
                if df is not None:
                    matches_count = process_csv_matches(df, league_code, season)
                    total_matches += matches_count
                    print(f"‚úÖ {matches_count} –º–∞—Ç—á–µ–π")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞")
        
        print("\n" + "=" * 70)
        print(f"‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"   –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_matches}")
        print(f"   –ö–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: {Team.query.count()}")
        print(f"   –ú–∞—Ç—á–µ–π –≤ –±–∞–∑–µ: {Match.query.count()}")
        print("=" * 70)
        
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏!")


if __name__ == '__main__':
    main()
