"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –í –∫–∞–∫–æ–π —Å—Ö–µ–º–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç–∞–±–ª–∏—Ü—ã?
"""
import os
import psycopg2

database_url = os.getenv('DATABASE_URL')
schema = os.getenv('DATABASE_SCHEMA', 'goalpredictor')

print("=" * 60)
print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
print("=" * 60)
print(f"\n–¶–µ–ª–µ–≤–∞—è —Å—Ö–µ–º–∞: {schema}")
print("\nüìã –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã 'users' –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö:\n")

try:
    conn = psycopg2.connect(database_url)
    cursor = conn.cursor()
    
    # –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É users –≤–æ –≤—Å–µ—Ö —Å—Ö–µ–º–∞—Ö
    cursor.execute("""
        SELECT table_schema, table_name
        FROM information_schema.tables
        WHERE table_name = 'users'
        ORDER BY table_schema;
    """)
    
    users_tables = cursor.fetchall()
    
    if users_tables:
        for schema_name, table_name in users_tables:
            print(f"‚úì –ù–∞–π–¥–µ–Ω–∞: {schema_name}.{table_name}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏
            cursor.execute("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_schema = %s
                AND table_name = 'users'
                ORDER BY ordinal_position;
            """, (schema_name,))
            
            columns = [row[0] for row in cursor.fetchall()]
            print(f"  –ö–æ–ª–æ–Ω–∫–∏: {', '.join(columns)}")
            print()
    else:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Å—Ö–µ–º–µ!")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ö–µ–º–µ
    print(f"\nüìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ '{schema}':\n")
    cursor.execute("""
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = %s
        ORDER BY table_name;
    """, (schema,))
    
    tables = cursor.fetchall()
    if tables:
        for (table_name,) in tables:
            print(f"  - {table_name}")
    else:
        print(f"  (—Å—Ö–µ–º–∞ '{schema}' –ø—É—Å—Ç–∞)")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ public
    print(f"\nüìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ 'public':\n")
    cursor.execute("""
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public'
        ORDER BY table_name;
    """)
    
    public_tables = cursor.fetchall()
    if public_tables:
        for (table_name,) in public_tables:
            print(f"  - {table_name}")
    else:
        print("  (—Å—Ö–µ–º–∞ 'public' –ø—É—Å—Ç–∞)")
    
    cursor.close()
    conn.close()
    
    print("\n" + "=" * 60)
    
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")
    import traceback
    traceback.print_exc()
