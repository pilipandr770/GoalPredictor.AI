"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö –∑–∞ 2020-2025 –≥–æ–¥—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Football-Data.org API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
"""
import time
from datetime import datetime, timedelta
from extensions import db
from app import create_app
from models import Team, Match
from services.football_api import FootballAPIService
from sqlalchemy.exc import IntegrityError

app = create_app()
football_api = FootballAPIService()

# –¢–æ–ø-5 –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ª–∏–≥
LEAGUES = {
    'PL': 'Premier League',
    'PD': 'La Liga',
    'BL1': 'Bundesliga',
    'SA': 'Serie A',
    'FL1': 'Ligue 1'
}

# –°–µ–∑–æ–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (2020-2025)
SEASONS = [2020, 2021, 2022, 2023, 2024, 2025]


def load_season_matches(league_code, season_year):
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ —Å–µ–∑–æ–Ω–∞
    """
    print(f"   üì• –°–µ–∑–æ–Ω {season_year}/{season_year+1}...")
    
    try:
        # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Å–µ–∑–æ–Ω–∞ (–∞–≤–≥—É—Å—Ç-–º–∞–π)
        date_from = f"{season_year}-08-01"
        date_to = f"{season_year + 1}-05-31"
        
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
        endpoint = f'competitions/{league_code}/matches'
        params = {
            'dateFrom': date_from,
            'dateTo': date_to,
            'status': 'FINISHED'
        }
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
        response = football_api.api._make_request(endpoint, params)
        
        if not response or 'matches' not in response:
            print(f"      ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return 0
        
        matches = response['matches']
        matches_added = 0
        
        for match_data in matches:
            try:
                # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if match_data['score']['fullTime']['home'] is None:
                    continue
                
                # –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
                home_team = Team.query.filter_by(
                    api_id=match_data['homeTeam']['id']
                ).first()
                
                if not home_team:
                    home_team = Team(
                        api_id=match_data['homeTeam']['id'],
                        name=match_data['homeTeam']['name'],
                        league=league_code,
                        country='Unknown'
                    )
                    db.session.add(home_team)
                
                away_team = Team.query.filter_by(
                    api_id=match_data['awayTeam']['id']
                ).first()
                
                if not away_team:
                    away_team = Team(
                        api_id=match_data['awayTeam']['id'],
                        name=match_data['awayTeam']['name'],
                        league=league_code,
                        country='Unknown'
                    )
                    db.session.add(away_team)
                
                db.session.flush()  # –ü–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–∞–Ω–¥
                
                # –°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                existing_match = Match.query.filter_by(
                    api_id=match_data['id']
                ).first()
                
                if not existing_match:
                    home_goals = match_data['score']['fullTime']['home']
                    away_goals = match_data['score']['fullTime']['away']
                    total_goals = home_goals + away_goals
                    
                    new_match = Match(
                        api_id=match_data['id'],
                        home_team_id=home_team.id,
                        away_team_id=away_team.id,
                        match_date=datetime.fromisoformat(
                            match_data['utcDate'].replace('Z', '+00:00')
                        ),
                        league=league_code,
                        status='FINISHED',
                        home_goals=home_goals,
                        away_goals=away_goals,
                        total_goals=total_goals,
                        result='1' if home_goals > away_goals else ('X' if home_goals == away_goals else '2'),
                        over_2_5=total_goals > 2.5,
                        btts=(home_goals > 0 and away_goals > 0)
                    )
                    db.session.add(new_match)
                    matches_added += 1
            
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {str(e)}")
                continue
        
        db.session.commit()
        return matches_added
    
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        db.session.rollback()
        return 0


def calculate_team_statistics():
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    """
    print("\nüìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥...")
    
    teams = Team.query.all()
    
    for team in teams:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã
        home_matches = Match.query.filter_by(
            home_team_id=team.id,
            status='FINISHED'
        ).all()
        
        away_matches = Match.query.filter_by(
            away_team_id=team.id,
            status='FINISHED'
        ).all()
        
        total_matches = len(home_matches) + len(away_matches)
        
        if total_matches == 0:
            continue
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        goals_scored = 0
        goals_conceded = 0
        over_2_5_count = 0
        
        for match in home_matches:
            goals_scored += match.home_goals
            goals_conceded += match.away_goals
            if match.over_2_5:
                over_2_5_count += 1
        
        for match in away_matches:
            goals_scored += match.away_goals
            goals_conceded += match.home_goals
            if match.over_2_5:
                over_2_5_count += 1
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
        team.total_matches = total_matches
        team.goals_scored = goals_scored
        team.goals_conceded = goals_conceded
        team.avg_goals_per_match = goals_scored / total_matches if total_matches > 0 else 0
        team.over_2_5_percentage = (over_2_5_count / total_matches * 100) if total_matches > 0 else 0
        
        # –§–æ—Ä–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–µ–π
        recent_matches = (home_matches + away_matches)[-5:]
        form = ''
        for match in recent_matches:
            if match.home_team_id == team.id:
                if match.home_goals > match.away_goals:
                    form += 'W'
                elif match.home_goals == match.away_goals:
                    form += 'D'
                else:
                    form += 'L'
            else:
                if match.away_goals > match.home_goals:
                    form += 'W'
                elif match.away_goals == match.home_goals:
                    form += 'D'
                else:
                    form += 'L'
        
        team.last_5_form = form[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
        team.last_update = datetime.utcnow()
    
    db.session.commit()
    print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {len(teams)} –∫–æ–º–∞–Ω–¥")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    with app.app_context():
        print("=" * 70)
        print("üìö –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• (2020-2025)")
        print("=" * 70)
        print(f"\n‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%H:%M:%S')}")
        print("\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 10 –∑–∞–ø—Ä–æ—Å–∞–º–∏/–º–∏–Ω—É—Ç—É")
        print("   –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–π–º–µ—Ç ~15-20 –º–∏–Ω—É—Ç (—Å –ø–∞—É–∑–∞–º–∏)\n")
        
        total_matches_loaded = 0
        
        for league_code, league_name in LEAGUES.items():
            print(f"\nüèÜ {league_name} ({league_code})")
            print("-" * 70)
            
            for season_year in SEASONS:
                matches_count = load_season_matches(league_code, season_year)
                total_matches_loaded += matches_count
                
                if matches_count > 0:
                    print(f"      ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {matches_count} –º–∞—Ç—á–µ–π")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (API –ª–∏–º–∏—Ç: 10/–º–∏–Ω)
                time.sleep(7)  # 7 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        print("\n" + "=" * 70)
        print(f"‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print(f"   –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_matches_loaded}")
        print(f"   –ö–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: {Team.query.count()}")
        print(f"   –ú–∞—Ç—á–µ–π –≤ –±–∞–∑–µ: {Match.query.count()}")
        print("=" * 70)
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        calculate_team_statistics()
        
        print(f"\n‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")
        print("\nüéØ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")


if __name__ == '__main__':
    main()
